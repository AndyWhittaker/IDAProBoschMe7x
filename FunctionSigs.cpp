#include <auto.hpp>
// FunctionSigs.cpp: implementation of the FunctionSigs class.
//
//////////////////////////////////////////////////////////////////////

//Standard Defs
typedef int     BOOL;
#define FALSE   0
#define TRUE    1
#define NULL    0

#include <pro.h>
#include <kernwin.hpp>
#include <bytes.hpp>
#include <funcs.hpp>
#include <lines.hpp>
#include <name.hpp>

#include "FunctionSigs.h"//Has all the function signatures stored within it

//Defines if the following data is a function or a data array
#define	FUNC	1
#define	DATA	2

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////
#define NUM_FUNC_SIGS	107

unsigned char fs_functionnames[NUM_FUNC_SIGS][255] = 
		{
			{ "CRC32_MainRoutine" },
			{"Do_CRC32"},
			{"StackJumpR5R4"},
			{"Crc32_ME711" },
			{"MulitpointChksum" },
			{"CopyROMtoRAM"},
			{"WLookup2D_Spark"},
			{"WLookup1D_CTS"},
			{"WLookup2D_BoostAndFuel"},
			{"WLookup1D_RPM"},
			{"BLookup2D_Fuel"},
			{"ParseDTCME71a"},
			{"SetDTCME71a"},
			{ "CopyBuffer"},
			{ "CRCSub0"},
			{ "CRCSub1"},
			{ "CRC32Calc"},
			{ "MultitaskCRC32"},
			{ "ReadADC3"},
			{ "CANStuff1"},
			{ "CANWriteToMsgController"},
			{ "CANStuff0"},
			{ "EnableADC"},
			{ "ReadADC2"},
			{ "SetupADC"},
			{ "ReadADC1"},
			{ "IRRFiltLoPass16bit_16bitRes0"},
			{ "IRRFilt16bit_32bitRes1"},
			{ "IRRFilt16bit_32bitRes0"},
			{ "TableScaler32by16bit_16bitRes"},
			{ "UnsDiv32by16bit_16bitRes"},
			{ "UnsDiv16bit_16bitRes"},
			{ "SignedMult16bitNegativeA_32bitRes"},
			{ "SignedMult16bit_32bitRes"},
			{ "UnsMult16bit_16bitHiRes"},
			{ "UnsMult16bit_32bitRes"},
			{ "UnsMult16bit_16bitRes"},
			{ "Signed32bitSubtract"},
			{ "Signed8bitSubtract"},
			{ "Uns8bitSubtract"},
			{ "Signed16bitSubtract"},
			{ "Uns16bitSubtract"},
			{ "ServiceWatchdog"},
			{ "ConditionalMultiply"},
			{ "Write32bitValue"},
			{ "Read32bitValue"},
			{ "ME71VAGseedkey_routine0"},
			{ "ME71VAGseedkey_routine1"},
			{ "kwp2000_27_SecurityAccess"},
			{ "kwp2000_27_SecurityAccessOpel_01"},
			{ "kwp2000_27_SecurityAccessOpel_02"},
			{ "ME761OPELseedkey_routine0"},
			{ "LookupA" },
			{ "LookupB" },
			{ "LookupC" },
			{ "LookupD" },
			{ "LookupE" },
			{ "LookupF" },
			{ "LookupG" },
			{ "LookupH" },
			{ "LookupI" },
			{ "LookupJ" },
			{ "LookupK" },
			{ "LookupL" },
			{ "LookupM" },
			{ "LookupN" },
			{ "LookupO" },
			{ "LookupP" },
			{ "LookupQ" },
			{ "LookupR" },
			{ "LookupS" },
			{ "LookupT" },
			{ "LookupU" },
			{ "LookupV" },
			{ "WLookup1DIAT" },
			{ "LookupX" },
			{ "LookupY" },
			{ "LookupZ" },
			{ "LookupAA" },
			{ "WLookup2DBoost" },
			{ "LookupAC" },
			{ "LookupAD" },
			{ "LookupAE" },
			{ "LookupAF" },
			{ "CRC8Sub" },
			{ "CRC8ME75" },
			{"RSACallingSub"},
			{"CRC32ME71Sub"},
			{"CRC32ME75Sub"},
			{"CRC32ME75"},
			{"TestSub"},
			{"SetDTCME75"},
			{"SetDTCME75"},
			{"SetDTCME75"},
			{"SetDTCME71"},
			{"SetDTCME75"},
			{"SetDTCME75"},
			{"SetDTCME761"},
			{"Reset_Handler"},
			{"Reset_Handler"},
			{"Chksum803c"},
			{"Chksum803c"},
			{"Chksum803c"},
			{"Chksum803c"},
			{"ValidateROMChksum"},
			{"MainROMChksum"},
			{"MainROMChksum"}
		};

unsigned char fs_functioncomments[NUM_FUNC_SIGS][255] = 
		{
			{ "Main routine to perform the ROM Wide CRC32 checks" },
			{"CRC32 Hash Lookup"},
			{"Jumps to the address R5:R4"},
			{"CRC32 ME711 Routine - Golf R32" },
			{"Multipoint Chksum Routine"},
			{"Copies ROM Code to RAM Area\nProbably for FLASH programming"},
			{"2D Lookup Word Arguments usually Spark related\n\nr12= Main Table map address\nr13= Column Table Addr\nr14= Y\nr15= X"},
			{"1D Lookup Word Arguments usually CTS related\n\nr12= Map address, 1st byte height\nr13= X"},
			{"2D Lookup Word Arguments usually Boost and Fuel related\n\nr12= Map address, 1st byte width, 2nd byte height\nr13= Y\nr14= X"},
			{"1D Lookup Word Arguments usually RPM related\n\nr12= Map address, 1st byte height\nr13= X"},
			{"2D Lookup Byte Arguments usually Fuel related\n\nr12= Map address, 1st byte width, 2nd byte height\nr13= Y\nr14= X"},
			{"Parses the Diagnostic Trouble Code\nr12 = ErrorCode"},
			{"Sets the Diagnostic Trouble Code\nr12 = ErrorCode"},
			{"Copies a buffer\n\nr12:AddrFrom\nr13:Segment\nr14:AddrTo\nr15:Length\n"},
			{"Calculates a CRC Checksum\n\nr12: Addr\nr13: Length\n"},
			{"Calculates a CRC Checksum\n\nr12: AddrFromLo\nr13: AddrFromHi\nr14: AddrToLo\nr15: AddrToHi"},
			{"Calculates CRC32 Checksum\n\nr12: AddrFromLo\nr13: AddrFromHi\nr14: AddrToLo\nr15: AddrToHi"},
			{"Calculates CRC32 Chksums but multitasks\n\nr12: AddrFromLo\nr13: AddrFromHi\nr14: AddrToLo\nr15: AddrToHi"},
			{"Read ADC - 16 bit result into an array"},
			{"CAN Stuff"},
			{"CAN Write To Msg Controller"},
			{"CAN Stuff"},
			{"Enable ADC"},
			{"Read ADC2 - 16 bit result into an array\nr12 = ADC Channel\nr13 = Address to write ADC result"},
			{"Setup ADC - Sets up various variables for the ADC"},
			{"Read ADC1 - 16 bit result into an array"},
			{"16bit analogue IRR Lowpass Filter - 16 bit result"},
			{"16bit analogue IRR Filter - 32 bit result"},
			{"16bit analogue IRR Filter - 32 bit result"},
			{"Table Scaler 32bit by 16bit Unsigned Divide - 16 bit result"},
			{"32bit by 16bit Unsigned Divide - 16 bit result"},
			{"16bit Unsigned Divide - 16 bit result"},
			{"16bit Signed Multiply With Negative Handling - 32 bit result\n\nr13 with r12\nResult r4:r5"},
			{"16bit Signed Multiply - 32 bit result\n\nr13 with r12\nResult r4:r5"},
			{"16bit Unsigned Multiply - 16 bit high byte result\n\nr13 with r12\nResult r4"},
			{"16bit Unsigned Multiply - 32 bit result\n\nr13 with r12\nResult r4:r5"},
			{"16bit Unsigned Multiply - 16 bit result\n\nr13 with r12\nResult r4"},
			{"Signed 32bit Subtraction\n\nr13:r12 with r15:r14\nResult r4:r5"},
			{"Signed 8bit Subtraction"},
			{"Unsigned 8bit Subtraction"},
			{"Signed 16bit Subtraction"},
			{"Unsigned 16bit Subtraction"},
			{"Service The Watchdog"},
			{"Conditional Multiply\nr5\nr4\nr10\nr11\n\nreturns 32 bit result r5:r6"},
			{"Write 32 Bit Value\nr5  - DPP\nr4  - Addr\n\nr11 - High Data\nr12 - Low Data"},
			{"Read 32 Bit Value\nr5  - DPP\nr4  - Addr\n\nreturns 32 bit result r11:r12"},
			{"Seedkey Routine\nIN:\nr14,r15=seedLo,seedHi\nr12=xorTable offset\nr13=byte_E240 (loop counter?)\n\nOUT: r4 - 0=key bad, 1=key matches..."},
			{"Seedkey Routine\nIN: r14,r15=seedLo,seedHi\nr12=xorTable offset\nr13=byte_E240 (loop counter?)\n\nOUT: r4 - 0=key bad, 1=key matches..."},
			{"kwp2000_27_SecurityAccess"},
			{"kwp2000_27_SecurityAccessOpel 01"},
			{"kwp2000_27_SecurityAccessOpel 02"},
			{"Seedkey Routine\nIN: r14,r15=seedLo,seedHi\nr12=xorTable offset\nr13=Length (loop counter)\n\nOUT: r4 - 0=key bad, 1=key matches..."},
			{"References a lookupA table"},
			{"References a lookupB table"},
			{"References a lookupC table"},
			{"References a lookupD table"},
			{"References a lookupE table"},
			{"References a lookupF table"},
			{"References a lookupG table"},
			{"References a lookupH table"},
			{"References a lookupI table"},
			{"References a lookupJ table"},
			{"References a lookupK table"},
			{"References a lookupL table"},
			{"References a lookupM table"},
			{"References a lookupN table"},
			{"References a lookupO table"},
			{"References a lookupP table"},
			{"References a lookupQ table"},
			{"References a lookupR table"},
			{"References a lookupS table"},
			{"References a lookupT table"},
			{"References a lookupU table"},
			{"References a lookupV table"},
			{"1D Lookup Word Argument usually IAT related\n\nr12= Map address, 1st byte height\nr13= Map DPP\nr14= X"},
			{"References a lookupX table"},
			{"References a lookupY table"},
			{"References a lookupZ table"},
			{"References a lookupAA table"},
			{"References a lookupAB table"},
			{"2D Lookup Word Arguments usually Boost related\n\nr4 = X\nr5 = Y\nr12= Main Table map address\nr13= Main Table map DPP\nr14= Column Table Addr\nr15= Column Table DPP"},
			{"References a lookup tableAD"},
			{"References a lookup tableAE"},
			{"References a lookup tableAF"},
			{"Calculates a basic CRC8 checksum\n\nr12= Addr\nr13= Seg\nr14= number of bytes"},
			{"Calculates a basic CRC8 checksum\n\nr12= Addr\nr13= Seg\nr14= number of bytes"},
			{"Deals with the RSA checking"},
			{"Calculates the CRC32 checksum\n\nr12: AddrFromLo\nr13: AddrFromHi\nr14: Length"},
			{"Calculates the CRC32 checksum\n\nr12: AddrFromLo\nr13: AddrFromHi\nr14: Length"},
			{"Calculates the CRC32 checksum\n\nr12: AddrFromLo\nr13: AddrFromHi\nr14: Length"},
			{"Test Subroutine"},
			{"Sets the Diagnostic Trouble Code\nr12 = ErrorCode"},
			{"Sets the Diagnostic Trouble Code\nr12 = ErrorCode"},
			{"Sets the Diagnostic Trouble Code\nr12 = ErrorCode"},
			{"Sets the Diagnostic Trouble Code\nr12 = ErrorCode"},
			{"Sets the Diagnostic Trouble Code\nr12 = ErrorCode"},
			{"Sets the Diagnostic Trouble Code\nr12 = ErrorCode"},
			{"Sets the Diagnostic Trouble Code (ME761)\nr12 = ErrorCode"},
			{"Reset Handler (ME7.1)"},
			{"Reset Handler (ME7.6.2)"},
			{"Does the 8038 and 803c checksum"},
			{"Does the 8038 and 803c checksum (ME7.6.1)"},
			{"Does the 8038 and 803c checksum"},
			{"Does the 8038 and 803c checksum (ME7.1.1)"},
			{"Main ROM chksum validate during ECU boot"},
			{"Main ROM chskum during runtime"},
			{"Main ROM chskum during runtime"}
		};
unsigned char fs_sigs[NUM_FUNC_SIGS][310] = {
			//CRC32_MainRoutine
			{ 0x88,0x90,0x88,0x80,0x88,0x70,0x88,0x60,0x28,0x06 },
			//CRC32 ME75
			{0x88,0x60,0x28,0x04,0xc2,0xf4,0x43,0x89,0x68},
			//StackJumpR5R4 Jump to R4:R5
			{0xEC, 0x0F5, 0x0EC, 0x0F4, 0x0DB, 0x00}, //len (6)
			//ME711 Golf R32 CRC32
			{ 0x28, 0x04, 0xf3, 0xf2, 0xd4, 0x46, 0x8a, 0xf1, 0x02, 0x00, 0xea, 0x00, 0x82, 0x56, 0xd7, 0x40,
			0x3d, 0x00, 0xf3, 0xf4, 0x52, 0x00, 0x9a, 0xf2, 0x02, 0x00, 0xea, 0x00, 0x82, 0x56, 0xf3, 0xf6, 
			0xd3, 0x46, 0x9a, 0xf3, 0x02, 0x10, 0xea, 0x00, 0x82, 0x56, 0xf3, 0xf8, 0xf0, 0x56, 0x49, 0x81,
			0xea, 0x30, 0xe0, 0x55, 0x0d, 0x28, 0xf2, 0xfc, 0xfc, 0x56, 0xf2, 0xfd, 0xfe, 0x56, 0xdc, 0x0d }, //len 64
			//RS4 Multipoint Chksum
			{0x88, 0x60, 0xf2, 0xf4, 0xff, 0xff, 0x66, 0xf4, 0x00, 0x80, 0x2d, 0x29, 0xe6, 0xf4, 0xff, 0xff,
			0x74, 0xf4, 0xff, 0xff, 0x9a, 0x89, 0x03, 0xa0, 0xf6, 0x8e, 0xff, 0xff, 0x0d, 0x03, 0xe0, 0x24,
			0xf6, 0xf4, 0xff, 0xff, 0xda, 0xff, 0xff, 0xff, 0xf2, 0xf4, 0xff, 0xff, 0x5c, 0x44, 0xf2, 0xfa,
			0xff, 0xff, 0xf2, 0xfb, 0xff, 0xff, 0x00, 0xa4, 0xdc, 0x5b, 0x98, 0x4a, 0xa8, 0x5a}, // len 62
			//RAM Copier probably for FLASH Programming
			{0x88, 0x90, 0x88, 0x80, 0xf2, 0xf4, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd7, 0x40, 0xe0, 0x00, 
			0xf6, 0xff, 0xff, 0xff, 0xd7, 0x40, 0xe1, 0x00, 0xf6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
			0xff, 0xff, 0xff, 0xff, 0xdc, 0x09, 0xa8, 0x48, 0xdc, 0x0e, 0xb8, 0x4d, 0xf0, 0x4d, 0xf0, 0x5e, 
			0x08, 0xd2, 0x18, 0xe0, 0xdc, 0x05, 0xa8, 0x24, 0xf0, 0x48, 0xf0, 0x59, 0x08, 0x82, 0x18, 0x90, 
			0xdc, 0x05, 0xa8, 0x34, 0x40, 0x23, 0x2d, 0x04},
			//2d Lookup
			{0xa9, 0x4d, 0xc0, 0x4d, 0xf0, 0x1e, 0xc0, 0x31, 0x1b, 0x1d, 0xf2, 0xf1, 0x0e, 0xfe, 0x00, 0xc1,
			0xf0, 0x1f, 0xc0, 0x31, 0x00, 0xc1, 0xa9, 0x4c, 0xd0, 0x42, 0x5c, 0x8f, 0x7c, 0x1f, 0x2d, 0x09, 
			0xf4, 0x6c, 0x01, 0x00, 0xd0, 0x63, 0x20, 0x32, 0x5c, 0x13, 0x0b, 0x3f, 0xf2, 0xf3, 0x0c, 0xfe, 
			0x00, 0x23, 0xf0, 0x42, 0x5c, 0x8e, 0x7c, 0x1e, 0x2d, 0x13, 0x00, 0xcd, 0x99, 0x4c, 0xd0, 0x42, 
			0x78, 0xf0, 0x2d, 0x08, 0xa9, 0x6c, 0xd0, 0x63, 0x20, 0x32, 0x5c, 0x13, 0x0b, 0x3f, 0xf2, 0xf3, 
			0x0c, 0xfe, 0x00, 0x23, 0x20, 0x24, 0x5c, 0x12, 0x0b, 0x2e, 0xf2, 0xf2, 0x0c, 0xfe, 0x00, 0x42, 
			0xdb, 0x00},
			//1d lookup
			{0xe0, 0x04, 0xf0, 0x3d, 0x99, 0x2c, 0xc0, 0x21, 0xf0, 0x2c, 0x49, 0x6a, 0xfd, 0x15, 0x00, 0x21, 
			0x28, 0x21, 0x49, 0x6a, 0x9d, 0x0f, 0x08, 0x21, 0x28, 0x21, 0x49, 0x6a, 0x8d, 0xfd, 0x29, 0x6a, 
			0x5c, 0x83, 0xf6, 0xf3, 0x0e, 0xfe, 0xf4, 0x62, 0x01, 0x00, 0x29, 0x6a, 0xc0, 0x63, 0x5b, 0x33, 
			0xf2, 0xf4, 0x0e, 0xfe, 0x20, 0x2c, 0xf1, 0x94, 0xdb, 0x00},
			//2d lookup
			{0x98, 0xbc, 0x66, 0xfb, 0xff, 0x00, 0x5c, 0x1b, 0x08, 0xc2, 0xe0, 0x04, 0xe0, 0x05, 0xe0, 0x01, 
			0xf0, 0x2c, 0x48, 0xda, 0xff, 0xff, 0xff, 0x2b, 0x28, 0x22, 0x48, 0xda, 0xff, 0xff, 0xff, 0x22, 
			0x28, 0x22, 0x48, 0xda, 0xff, 0xff, 0xff, 0x4d, 0x28, 0x4a, 0xd4, 0x52, 0x02, 0x00, 0x28, 0x5a, 
			0x20, 0x2c, 0x7c, 0x12, 0xf0, 0x12, 0xf0, 0xa5, 0x28, 0xc2, 0x98, 0xdc, 0x66, 0xfd, 0xff, 0x00, 
			0x5c, 0x1d, 0x00, 0xcb, 0xf0, 0xb4, 0xe0, 0x04, 0xe0, 0x05, 0xe0, 0x0f, 0xf0, 0x2c, 0x48, 0xea, 
			0xfd, 0x10, 0x00, 0x2d, 0x28, 0x22, 0x48, 0xea, 0x9d, 0x09, 0x08, 0x22, 0x28, 0x22, 0x48, 0xea, 
			0x8d, 0xfd, 0xf0, 0x4e, 0x28, 0x4a, 0xd4, 0x52, 0x02, 0x00, 0x28, 0x5a, 0x20, 0x2c, 0x7c, 0x12, 
			0xf0, 0xf2, 0xf0, 0xe4, 0x5c, 0x1f, 0x00, 0xcd, 0x1b, 0x1d, 0xf2, 0xf1, 0x0e, 0xfe, 0x00, 0xc1, 
			0x00, 0xcf, 0x98, 0x4c, 0x48, 0xe0, 0x2d, 0x11, 0xa8, 0x3c, 0x40, 0x43, 0xed, 0x07, 0x20, 0x34, 
			0x1b, 0x3e, 0x7b, 0x55, 0xf2, 0xf3, 0x0e, 0xfe, 0x00, 0x43, 0x0d, 0x07, 0xf0, 0x24, 0x20, 0x23, 
			0x1b, 0x2e, 0x7b, 0x55, 0xf2, 0xf2, 0x0e, 0xfe, 0x20, 0x42, 0x48, 0xb0, 0x2d, 0x26, 0x28, 0xc2, 
			0x00, 0xcd, 0x98, 0x3c, 0x48, 0xe0, 0x2d, 0x11, 0xa8, 0x2c, 0x40, 0x32, 0xed, 0x07, 0x20, 0x23, 
			0x1b, 0x2e, 0x7b, 0x55, 0xf2, 0xf2, 0x0e, 0xfe, 0x00, 0x32, 0x0d, 0x07, 0xf0, 0x13, 0x20, 0x12, 
			0x1b, 0x1e, 0x7b, 0x55, 0xf2, 0xf1, 0x0e, 0xfe, 0x20, 0x31, 0x40, 0x43, 0xed, 0x07, 0x20, 0x34, 
			0x1b, 0x3b, 0x7b, 0xaa, 0xf2, 0xf3, 0x0e, 0xfe, 0x00, 0x43, 0x0d, 0x07, 0xf0, 0x24, 0x20, 0x23, 
			0x1b, 0x2b, 0x7b, 0xaa, 0xf2, 0xf2, 0x0e, 0xfe, 0x20, 0x42, 0xdb, 0x00},
			//1d Lookup
			{0xf0, 0xed, 0x98, 0xdc, 0xe0, 0x04, 0xe0, 0x05, 0xe0, 0x0f, 0xf0, 0x1d, 0x66, 0xf1, 0xff, 0x00, 
			0x5c, 0x11, 0xf0, 0x2c, 0x48, 0xea, 0xbd, 0x10, 0x00, 0x21, 0x28, 0x22, 0x48, 0xea, 0xdd, 0x09, 
			0x48, 0xea, 0xdd, 0x02, 0x28, 0x22, 0x0d, 0xfc, 0xf0, 0x4e, 0x28, 0x4a, 0xd4, 0x52, 0x02, 0x00, 
			0x28, 0x5a, 0x20, 0x2c, 0x7c, 0x12, 0xf0, 0xf2, 0x5c, 0x1d, 0x5c, 0x1f, 0x00, 0xcd, 0x00, 0xcf, 
			0xf0, 0x24, 0x98, 0x4c, 0x48, 0x20, 0x2d, 0x11, 0xa8, 0x3c, 0x40, 0x43, 0xad, 0x07, 0x20, 0x34, 
			0x0b, 0x32, 0x6b, 0x55, 0xf2, 0xf3, 0x0e, 0xfe, 0x00, 0x43, 0x0d, 0x07, 0xf0, 0x14, 0x20, 0x13, 
			0x0b, 0x12, 0x6b, 0x55, 0xf2, 0xf3, 0x0e, 0xfe, 0x20, 0x43, 0xdb, 0x00},
			//2d Lookup
			{0x99, 0x6c, 0xc0, 0x6b, 0x08, 0xc1, 0xe0, 0x04, 0xe0, 0x05, 0xe0, 0x01, 0x66, 0xfd, 0xff, 0x00, 
			0xf0, 0x3d, 0xf0, 0x2c, 0x49, 0x6a, 0xfd, 0x10, 0x00, 0x2b, 0x28, 0x21, 0x49, 0x6a, 0x9d, 0x0a, 
			0x08, 0x21, 0x28, 0x21, 0x49, 0x6a, 0x8d, 0xfd, 0x29, 0x6a, 0xc0, 0x64, 0xf4, 0x62, 0x01, 0x00, 
			0x29, 0x6a, 0xc0, 0x65, 0x20, 0x2c, 0xf0, 0x12, 0xf0, 0xa5, 0x28, 0xc1, 0x99, 0x6c, 0x00, 0xcb, 
			0xc0, 0x6d, 0xf0, 0xb4, 0xe0, 0x04, 0xe0, 0x05, 0xe0, 0x0f, 0x66, 0xfe, 0xff, 0x00, 0xf0, 0x3e, 
			0xf0, 0x2c, 0x49, 0x6a, 0xfd, 0x10, 0x00, 0x2d, 0x28, 0x21, 0x49, 0x6a, 0x9d, 0x0a, 0x08, 0x21, 
			0x28, 0x21, 0x49, 0x6a, 0x8d, 0xfd, 0x29, 0x6a, 0xc0, 0x64, 0xf4, 0x62, 0x01, 0x00, 0x29, 0x6a, 
			0xc0, 0x65, 0x20, 0x2c, 0xf0, 0xf2, 0xf0, 0xe4, 0x00, 0xcd, 0x1b, 0x1d, 0xf2, 0xf1, 0x0e, 0xfe, 
			0x00, 0xc1, 0x00, 0xcf, 0x99, 0x8c, 0xc0, 0x84, 0x48, 0xe0, 0x2d, 0x08, 0xa9, 0x6c, 0xc0, 0x63, 
			0x20, 0x34, 0x0b, 0x3e, 0x6b, 0x55, 0xf2, 0xf3, 0x0e, 0xfe, 0x00, 0x43, 0x48, 0xb0, 0x2d, 0x14, 
			0x28, 0xc1, 0x00, 0xcd, 0x99, 0x6c, 0xc0, 0x63, 0x48, 0xe0, 0x2d, 0x08, 0xa9, 0x4c, 0xc0, 0x42, 
			0x20, 0x23, 0x0b, 0x2e, 0x6b, 0x55, 0xf2, 0xf2, 0x0e, 0xfe, 0x00, 0x32, 0x20, 0x34, 0x0b, 0x3b, 
			0x6b, 0xaa, 0xf2, 0xf3, 0x0e, 0xfe, 0x00, 0x43, 0xdb, 0x00},
			//Parses the DTC Code
			{0x88, 0xc0, 0x88, 0x90, 0x88, 0x80, 0x88, 0x70, 0x88, 0x60, 0xe6, 0xf4, 0xff, 0xff, 0x64, 0xf4, 0xff, 0xff, 0xf3, 0xf8, 0xff, 0xff, 0x49, 0x83, 0xea, 0x30, 0x28, 0x84, 0xf2, 0xf4, 0xff, 0xff, 0xf4, 0xa4, 0x01, 0x00, 0xc0, 0xa9, 0x5c, 0x89, 0x66, 0xf9, 0x00, 0xff, 0xf4, 0xa4, 0x02, 0x00, 0xc0, 0xa5, 0x66, 0xf5, 0xff, 0x00, 0x70, 0x95, 0x2d, 0x03, 0x46, 0xf9, 0x00, 0xff, 0x3d, 0x15},
			//Set DTC Peugeot
			{0x88, 0x60, 0xf0, 0x6c, 0xd4, 0x40, 0x02, 0x00, 0x9a, 0xf4, 0x1f, 0x00, 0xe6, 0xf5, 0xff, 0xff, 0xc0, 0xc2, 0x5c, 0x12, 0x00, 0x52, 0xa8, 0x25, 0x9a, 0xf2, 0x02, 0x00, 0x8a, 0xf4, 0x15, 0xc0, 0xd4, 0x40, 0x02, 0x00, 0x88, 0x40, 0xc0, 0xcc},
			//Copy Buffer
			{0x88, 0x90, 0xf0, 0x9e, 0x00, 0x9f, 0x0d, 0x06, 0xdc, 0x0d, 0xa9, 0x8c, 0xb9, 0x8e, 0x08, 0xe1, 0x08, 0xc1, 0x18, 0xd0, 0x40, 0xe9, 0x8d, 0xf8, 0x98, 0x90, 0xdb, 0x00},
			//CRC Sub
			{0x88, 0x60, 0xe6, 0xfe, 0xff, 0xff, 0x0d, 0x0d, 0xa9, 0x8c, 0xf0, 0x6e, 0x51, 0xc8, 0x7c, 0x8e, 0xc0, 0xc4, 0x5c, 0x14, 0xd7, 0x50, 0x02, 0x02, 0xff, 0xff, 0xff, 0xff, 0xcc, 0x00, 0x50, 0xe5, 0x08, 0xc1, 0x40, 0xcd, 0xfd, 0xf1, 0xf0, 0x4e, 0x98, 0x60, 0xdb, 0x00},
			//CRC Sub
			{0x88, 0x90, 0x88, 0x60, 0xe6, 0xf9, 0xff, 0xff, 0x0d, 0x0f, 0xdc, 0x0d, 0xa9, 0x8c, 0xf0, 0x69, 0x51, 0xc8, 0x7c, 0x89, 0xc0, 0xc4, 0x5c, 0x14, 0xd7, 0x50, 0x02, 0x02, 0xff, 0xff, 0xff, 0xff, 0xcc, 0x00, 0x50, 0x95, 0x08, 0xc1, 0x18, 0xd0, 0xf0, 0x4c, 0xf0, 0x5d, 0x20, 0x4e, 0x30, 0x5f, 0xfd, 0xec, 0xf0, 0x49, 0x98, 0x60, 0x98, 0x90, 0xdb, 0x00},
			//Peugeot CRC32 Sub
			{0x88, 0x90, 0x88, 0x80, 0x88, 0x60, 0xf4, 0x80, 0x0a, 0x00, 0xc0, 0x84, 0x68, 0x41, 0x2d, 0x05, 0xe6, 0xf8, 0xff, 0xff, 0xe6, 0xf9, 0xff, 0xff, 0x0d, 0x1b, 0xd4, 0x80, 0x06, 0x00, 0xd4, 0x90, 0x08, 0x00, 0x0d, 0x16, 0xdc, 0x0d, 0xa9, 0x8c, 0xf0, 0x68, 0x51, 0xc8, 0xf0, 0x49, 0x7c, 0x88, 0x7c, 0x89, 0x5c, 0x84, 0x70, 0x84, 0xc0, 0xc4, 0x5c, 0x24, 0xd7, 0x60, 0x02, 0x02, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcc, 0x00, 0x50, 0x8a, 0x50, 0x9b, 0x08, 0xc1, 0x18, 0xd0, 0xf0, 0x4c, 0xf0, 0x5d, 0x20, 0x4e, 0x30, 0x5f, 0xfd, 0xe5, 0xf4, 0x80, 0x0a, 0x00, 0xc0, 0x84, 0x68, 0x42, 0x2d, 0x04, 0x56, 0xf8, 0xff, 0xff, 0x56, 0xf9, 0xff, 0xff, 0xf0, 0x48, 0xf0, 0x59, 0x98, 0x60, 0x98, 0x80, 0x98, 0x90, 0xdb, 0x00},
			//CRC32 Multitasking Calcs
			{0x88, 0xf0, 0x88, 0xe0, 0x88, 0xd0, 0x88, 0xc0, 0x88, 0x90, 0x88, 0x80, 0x88, 0x70, 0x88, 0x60, 0x28, 0x04, 0xd4, 0x40, 0x1e, 0x00, 0x42, 0xf4, 0xdc, 0xfc, 0xea, 0xf0, 0x6e, 0xda, 0xff, 0xff, 0xff, 0xfc, 0xe0, 0x05, 0xf1, 0xba, 0xf1, 0xa9, 0x5c, 0x84, 0xd4, 0x80, 0x0c, 0x00, 0xd4, 0x90, 0x0e, 0x00, 0x00, 0x84, 0x10, 0x95, 0xe6, 0xf4, 0xff, 0xff, 0xe0, 0x05, 0x00, 0x48, 0x10, 0x59, 0xb8, 0x40, 0xc4, 0x50, 0x02, 0x00, 0xf2, 0xf2, 0xdc, 0xfc, 0x3d, 0x02, 0xe1, 0x1c, 0x0d, 0x01, 0xe1, 0x0c, 0x24, 0x8f, 0xdc, 0xfc, 0xd4, 0x40, 0x16, 0x00, 0xd4, 0x50, 0x18, 0x00, 0xd4, 0xa0, 0x0c, 0x00, 0xd4, 0xb0, 0x0e, 0x00, 0x20, 0xa4, 0x30, 0xb5, 0xea, 0x20, 0x3c, 0xda, 0xff, 0xff, 0xff, 0x00, 0x42, 0xf2, 0xdc, 0xfc, 0x3d, 0x27, 0xc0, 0xc3, 0x88, 0x30, 0xf2, 0xf4, 0xd8, 0xfc, 0xf2, 0xf5, 0xda, 0xff, 0xff, 0xff, 0x88, 0x40, 0xf0, 0xc8, 0xf0, 0xd9, 0xd4, 0xe0, 0x16, 0x00, 0xd4, 0xf0, 0x18, 0x00, 0x28, 0xe1},
			//ADC 16 read
			{0x88, 0x60, 0xe6, 0xd0, 0xff, 0xff, 0x9a, 0xcc,
			0xfe, 0x70, 0x7e, 0xcc, 0xf2, 0xf4, 0xa0, 0xfe,
			0x66, 0xf4, 0xff, 0x03, 0xb8, 0x4c, 0xe6, 0xd0,
			0xff, 0xff, 0xe7, 0xfc, 0x10, 0x00, 0x9a, 0xcc,
			0xfe, 0x70, 0x7e, 0xcc, 0xf2, 0xf4, 0xa0, 0xfe,
			0x66, 0xf4, 0xff, 0x03, 0xf0, 0x5c, 0x28, 0x52,
			0xc0, 0xc2, 0x5c, 0x12, 0x00, 0x52, 0xb8, 0x45,
			0x29, 0xc1, 0x49, 0xc0, 0xed, 0xf0, 0x98, 0x60, 0xdb, 0x00},
			//CAN Stuff
			{0xe7, 0xf8, 0x55, 0x00, 0xe6, 0xf5, 0xff, 0xff, 0xb9, 0x85, 0xe6, 0xf4, 0xff, 0xff, 0xb8, 0xe4, 0xe7, 0xf8, 0x55, 0x00, 0xe6, 0xf5, 0xff, 0xff, 0xb9, 0x85, 0xe6, 0xff, 0xff, 0xef, 0xb9, 0x85, 0xf0, 0x4d, 0xc0, 0x84, 0x5c, 0x44, 0xe6, 0xf5, 0xff, 0xff, 0xb9, 0x85, 0xf0, 0x4c, 0x7c, 0x34, 0xe6, 0xf5, 0xff, 0xff, 0xb9, 0x85, 0xf0, 0x4c, 0x5c, 0x54, 0xe6, 0xf5, 0xff, 0xff, 0xb9, 0x85, 0xe7, 0xf8, 0xff, 0x00, 0xe6, 0xf5, 0xff, 0xff, 0xb9, 0x85, 0xe7, 0xf8, 0xf8, 0x00, 0xe6, 0xf5, 0xff, 0xff, 0xb9, 0x85, 0xe7, 0xf8, 0x95, 0x00, 0xe6, 0xf5, 0xff, 0xff, 0xb9, 0x85, 0xdb, 0x00},
			//CAN Write To Msg Controller
			{0x88, 0x90, 0x88, 0x80, 0xf0, 0x4c, 0xc0, 0x84, 0x5c, 0x44, 0xe6, 0xf8, 0xff, 0xff, 0x00, 0x84, 0xf0, 0x4f, 0xc0, 0x89, 0x5c, 0x49, 0xf0, 0x4e, 0x49, 0x80, 0x2d, 0x02, 0x76, 0xf9, 0x08, 0x00, 0xf0, 0x49, 0xe4, 0x88, 0x06, 0x00, 0xf0, 0x4d, 0x7c, 0x34, 0xe4, 0x88, 0x02, 0x00, 0xf0, 0x4d, 0x5c, 0x54, 0xe4, 0x88, 0x03, 0x00, 0xe7, 0xf8, 0xff, 0x00, 0xe4, 0x88, 0x04, 0x00, 0xe7, 0xf8, 0xf8, 0x00, 0xe4, 0x88, 0x05, 0x00, 0xe7, 0xf8, 0x55, 0x00, 0xe4, 0x88, 0x01, 0x00, 0xe7, 0xf8, 0x95, 0x00, 0xb9, 0x88, 0x98, 0x80, 0x98, 0x90},
			//CAN Stuff
			{0xe6, 0xf2, 0xff, 0xff, 0xf6, 0xf2, 0x90, 0x8d, 0xe6, 0xf2, 0xff, 0xff, 0xf6, 0xf2, 0x92, 0x8d, 0xdb, 0x00, 0xe6, 0xf4, 0xff, 0xff, 0xf6, 0xf4, 0x82, 0x8d, 0xe6, 0xf5, 0xff, 0xff, 0xf6, 0xf5, 0x84, 0x8d, 0xe6, 0xf2, 0xff, 0xff, 0xf6, 0xf2, 0x86, 0x8d, 0xe0, 0x03, 0xf6, 0xf3, 0x88, 0x8d, 0xe0, 0x01, 0xf6, 0xf1, 0x8a, 0x8d, 0xe6, 0xf2, 0xff, 0xff, 0xf6, 0xf2, 0x8c, 0x8d, 0xe0, 0x02, 0xf6, 0xf2, 0x8e, 0x8d, 0xe6, 0xf2, 0xff, 0xff, 0xf6, 0xf2, 0x90, 0x8d, 0xe6, 0xf2, 0xff, 0xff, 0xf6, 0xf2, 0x92, 0x8d, 0xdb, 0x00, 0xd1, 0x20, 0x1a, 0x88, 0xf0, 0xf8, 0xe6, 0xbb, 0xff, 0xff, 0xe6, 0xba, 0xff, 0xff, 0xe6, 0xb9, 0xff, 0xff, 0xe6, 0xcd, 0xff, 0xff},
			//Enable ADC
			{0x6e, 0xcd, 0x7f, 0xd0, 0xfb, 0x88},
			//ADC 2 read
			{0x9a, 0xd0, 0x04, 0xb0, 0x8a, 0xd0, 0xfe, 0xb0, 0xf2, 0xfe, 0xa0, 0xf0, 0xf0, 0x4c, 0x5c, 0xc4, 0xf6, 0xf4, 0xa0, 0xf0, 0xbf, 0xd0, 0xe1, 0x08, 0x4a, 0xd0, 0xf4, 0xb0, 0x49, 0x81, 0x2d, 0xfb, 0xf2, 0xf4, 0xa0, 0xf0, 0x66, 0xf4, 0xff, 0x03, 0xb8, 0x4d, 0xf6, 0xfe, 0xa0, 0xf0, 0xdb, 0x00},
			//ADC Setup
			{0xda, 0xff, 0xff, 0xff, 0xe6, 0xf4, 0xff, 0xff, 0xf6, 0xf4, 0xec, 0xfc, 0xe6, 0xf4, 0xff, 0xff, 0xf6, 0xf4, 0xee, 0xfc, 0xe6, 0x63, 0xff, 0xff, 0xe6, 0xcc, 0xff, 0xff, 0xe6, 0xcd, 0xff, 0xff, 0xe6, 0xd0, 0xff, 0xff, 0xbe, 0xd0, 0xdb, 0x00},
			//ADC 1 read
			{0xe6, 0xd0, 0xff, 0xff, 0x9a, 0xcc, 0xfe, 0x70, 0x7e, 0xcc, 0xf6, 0x50, 0xd2, 0xf7, 0xe6, 0xd0, 0xff, 0xff, 0xe0, 0x0c, 0x9a, 0xcc, 0xfe, 0x70, 0x7e, 0xcc, 0xf2, 0xf4, 0xa0, 0xfe, 0xf0, 0x5c, 0x5c, 0x15, 0xc4, 0x45, 0xff, 0xff, 0x08, 0xc1, 0x46, 0xfc, 0x10, 0x00, 0x8d, 0xf3, 0xdb, 0x00},
			//16 bit analogue IRR lowpass filter
			{0x5c, 0x8d, 0x40, 0xde, 0x8d, 0x0f, 0x3d, 0x02, 0xf0, 0x4e, 0xdb, 0x00, 0xf0, 0x1d, 0x20, 0x1e, 0x1b, 0xc1, 0xf2, 0xf4, 0x0c, 0xfe, 0x3d, 0x01, 0xe0, 0x14, 0x00, 0x4e, 0x9d, 0x0e, 0xf2, 0xf4, 0x1e, 0xff, 0xdb, 0x00, 0xf0, 0x4e, 0xf0, 0x2e, 0x20, 0x2d, 0x1b, 0xc2, 0xf2, 0xf1, 0x0c, 0xfe, 0x3d, 0x01, 0xe0, 0x11, 0x20, 0x41, 0x9d, 0x01, 0xe0, 0x04, 0xdb, 0x00, 0xdb, 0x00},
			//16 bit analogue IRR filter
			{0xe0, 0x01, 0x40, 0xde, 0xad, 0x19, 0x3d, 0x05, 0x40, 0x1f, 0x8d, 0x03, 0xf0, 0x5e, 0xf0, 0x4f, 0xdb, 0x00, 0xf0, 0x4e, 0xf0, 0x3f, 0x20, 0x4d, 0x1b, 0xc4, 0xf2, 0xfd, 0x0c, 0xfe, 0x2d, 0x03, 0xf2, 0xf1, 0x0e, 0xfe, 0x0d, 0x04, 0xf2, 0xf1, 0x0e, 0xfe, 0x3d, 0x01, 0xe0, 0x11, 0xf0, 0x5e, 0xf0, 0x4f, 0x20, 0x41, 0x30, 0x5d, 0xdb, 0x00, 0xf0, 0x4d, 0xe0, 0x03, 0x20, 0x3f, 0x30, 0x4e, 0x1b, 0xc4, 0xf2, 0xf5, 0x0c, 0xfe, 0x2d, 0x03, 0xf2, 0xf4, 0x0e, 0xfe, 0x0d, 0x04, 0xf2, 0xf4, 0x0e, 0xfe, 0x3d, 0x01, 0xe0, 0x14, 0x00, 0x4f, 0x10, 0x5e, 0xdb, 0x00},
			//16 bit analogue IRR filter
			{0xe0, 0x03, 0x40, 0xde, 0xed, 0x1c, 0x3d, 0x05, 0x40, 0x3f, 0x8d, 0x03, 0xf0, 0x5e, 0xf0, 0x4f, 0xdb, 0x00, 0xf0, 0x4e, 0xf0, 0x3f, 0x20, 0x4d, 0x1b, 0xc4, 0xf2, 0xfd, 0x0c, 0xfe, 0x2d, 0x03, 0xf2, 0xf1, 0x0e, 0xfe, 0x0d, 0x04, 0xf2, 0xf1, 0x0e, 0xfe, 0x3d, 0x01, 0xe0, 0x11, 0xf0, 0x5e, 0xf0, 0x4f, 0x20, 0x41, 0x30, 0x5d, 0x9d, 0x19, 0xe0, 0x04, 0xe0, 0x05, 0xdb, 0x00, 0xf0, 0x4d, 0x20, 0x3f, 0x30, 0x4e, 0x1b, 0xc4, 0xf2, 0xfd, 0x0c, 0xfe, 0x2d, 0x03, 0xf2, 0xf1, 0x0e, 0xfe, 0x0d, 0x04, 0xf2, 0xf1, 0x0e, 0xfe, 0x3d, 0x01, 0xe0, 0x11, 0xf0, 0x5e, 0xf0, 0x4f, 0x00, 0x41, 0x10, 0x5d, 0x9d, 0x03, 0xf2, 0xf4, 0x1e, 0xff, 0xf0, 0x54, 0xdb, 0x00},
			//16 bit table scaler
			{0x1b, 0xcd, 0x7b, 0xee, 0x4d, 0x03, 0xf2, 0xf4, 0x0e, 0xfe, 0xdb, 0x00, 0xe6, 0xf4, 0xff, 0xff, 0xdb, 0x00},
			//16 bit divide - 8 bit byte result
			{0xf6, 0xfc, 0x0c, 0xfe, 0xf6, 0xfd, 0x0e, 0xfe, 0x7b, 0xee, 0x4d, 0x03, 0xf2, 0xf4, 0x0e, 0xfe, 0xdb, 0x00, 0xe6, 0xf4, 0xff, 0xff, 0xdb, 0x00},
			//16 bit divide - 8 bit byte result
			{0xf6, 0xfc, 0x0e, 0xfe, 0x5b, 0xdd, 0x4d, 0x03, 0xf2, 0xf4, 0x0e, 0xfe, 0xdb, 0x00, 0xe6, 0xf4, 0xff, 0xff, 0xdb, 0x00},
			//16 bit multiply with negative handling - 32 bit byte result
			{0xf0, 0x4d, 0x6d, 0x06, 0x0b, 0xcd, 0xf2, 0xf5, 0x0c, 0xfe, 0xf2, 0xf4, 0x0e, 0xfe, 0xdb, 0x00, 0x66, 0xfd, 0xff, 0x7f, 0x0b, 0xcd, 0xf2, 0xf4, 0x0e, 0xfe, 0xf2, 0xf5, 0x0c, 0xfe, 0xe0, 0x0d, 0x4a, 0xfc, 0xfd, 0x0f, 0xbc, 0x1c, 0x00, 0x4d, 0x10, 0x5c, 0xdb, 0x00},
			//16 bit multiply - 32 bit byte result
			{0x0b, 0xcd, 0xf2, 0xf5, 0x0c, 0xfe, 0xf2, 0xf4, 0x0e, 0xfe, 0xdb, 0x00},
			//16 bit multiply - 16 bit high byte result
			{0x1b, 0xcd, 0xf2, 0xf4, 0x0c, 0xfe, 0xdb, 0x00},
			//16 bit multiply - 32 bit result
			{0x1b, 0xcd, 0xf2, 0xf5, 0x0c, 0xfe, 0xf2, 0xf4, 0x0e, 0xfe, 0xdb, 0x00},
			//16 bit multiply - 16 bit result
			{0x1b, 0xcd, 0x4d, 0x03, 0xf2, 0xf4, 0x0e, 0xfe, 0xdb, 0x00, 0xe6, 0xf4, 0xff, 0xff, 0xdb, 0x00},
			//Signed 32bit subtract
			{0xf0, 0x4d, 0xf0, 0x5c, 0x20, 0x4f, 0x30, 0x5e, 0x4d, 0x01, 0xdb, 0x00, 0x9d, 0x05, 0xe6, 0xf4, 0xff, 0xff, 0xe6, 0xf5, 0xff, 0xff, 0xdb, 0x00, 0xe0, 0x04, 0xe6, 0xf5, 0xff, 0xff, 0xdb, 0x00, 0xdb, 0x00},
			//Signed 8bit subtract
			{0xf0, 0x4c, 0xf0, 0x3d, 0x21, 0x86, 0x8d, 0x02, 0x6d, 0x03, 0xdb, 0x00, 0x7d, 0x04, 0xdb, 0x00, 0xe7, 0xf8, 0x7f, 0x00, 0xdb, 0x00, 0xe7, 0xf8, 0x80, 0x00, 0xdb, 0x00},
			//Unsigned 8bit subtract (14)
			{0xf0, 0x4c, 0xf0, 0x3d, 0x21, 0x86, 0x8d, 0x01, 0xdb, 0x00, 0xe0, 0x04, 0xdb, 0x00},
			//Signed 16bit subtract (26)
			{0xf0, 0x4c, 0x20, 0x4d, 0x8d, 0x02, 0x6d, 0x03, 0xdb, 0x00, 0x7d, 0x04, 0xdb, 0x00, 0xe6, 0xf4, 0xff, 0xff, 0xdb, 0x00, 0xe6, 0xf4, 0xff, 0xff, 0xdb, 0x00},
			//Unsigned 16bit subtract (12)
			{0xf0, 0x4c, 0x20, 0x4d, 0x8d, 0x01, 0xdb, 0x00, 0xe0, 0x04, 0xdb, 0x00},
			//Service Watchdog (10)
			{0xf6, 0xfc, 0xae, 0xff, 0xa7, 0x58, 0xa7, 0xa7, 0xdb, 0x00},
			//Conditional Multiply (32)
			{0x70, 0x55, 0x2d, 0x03, 0x1b, 0x5a, 0xf2, 0xf5, 0x0e, 0xfe, 0x70, 0xbb, 0x2d, 0x03, 0x1b, 0xb4,
			0x02, 0xf5, 0x0e, 0xfe, 0x1b, 0x4a, 0x02, 0xf5, 0x0c, 0xfe, 0xf2, 0xf4, 0x0e, 0xfe, 0xdb, 0x00},
			//Write 32 bit value (14)
			{0xdc, 0x05, 0xb8, 0xa4, 0x08, 0x42, 0x18, 0x50, 0xdc, 0x05, 0xb8, 0xb4, 0xdb, 0x00},
			//Read 32 bit value (14)
			{0xdc, 0x05, 0xa8, 0xa4, 0x08, 0x42, 0x18, 0x50, 0xdc, 0x05, 0xa8, 0xb4, 0xdb, 0x00},
			//seedkey_routine - exact copy of VAG ME7.1 (106)
			{0x88, 0x60, 0xf0, 0x4d, 0x07, 0xf8, 0x23, 0x00, 0xf0, 0xd4, 0x47, 0xf8, 0x23, 0x00, 0x9d, 0x02, 0xe6, 0xfd, 0xff, 0xff, 0xe1, 0x0c, 0x0d, 0x1a, 0x46, 0xff, 0x00, 0x80, 0x3d, 0x01, 0x48, 0xe0, 0x8d, 0x12, 0xf0, 0x4c, 0xc0, 0x84, 0x5c, 0x24, 0xd7, 0x50, 0x00, 0x00, 0xd4, 0xa4, 0x8c, 0x05, 0xd4, 0xb4, 0x8e, 0x05, 0xf0, 0x4e, 0xf0, 0x5f, 0x00, 0x44, 0x10, 0x55, 0x50, 0x4a, 0x50, 0x5b, 0xf0, 0xe4, 0xf0, 0xf5, 0x0d, 0x02, 0x00, 0xee, 0x10, 0xff, 0x09, 0xc1, 0xf0, 0x4d, 0x41, 0xc8, 0x8d, 0xe3, 0xd4, 0x40, 0x02, 0x00, 0xd4, 0x50, 0x04, 0x00, 0x20, 0x4e, 0x30, 0x5f, 0x3d, 0x02, 0xe0, 0x14, 0x0d, 0x01, 0xe0, 0x04, 0x98, 0x60, 0xdb, 0x00},
			//seedkey_routine - generic copy of VAG ME7.1 (106)
			{0x88, 0x60, 0xf0, 0x4d, 0x07, 0xf8, 0x23, 0x00, 0xf0, 0xd4, 0x47, 0xf8, 0x23, 0x00, 0x9d, 0x02, 0xe6, 0xfd, 0xff, 0xff, 0xe1, 0x0c, 0x0d, 0x1a, 0x46, 0xff, 0x00, 0x80, 0x3d, 0x01, 0x48, 0xe0, 0x8d, 0x12, 0xf0, 0x4c, 0xc0, 0x84, 0x5c, 0x24, 0xd7, 0x50, 0x00, 0x00, 0xd4, 0xa4, 0xff, 0xff, 0xd4, 0xb4, 0xff, 0xff, 0xf0, 0x4e, 0xf0, 0x5f, 0x00, 0x44, 0x10, 0x55, 0x50, 0x4a, 0x50, 0x5b, 0xf0, 0xe4, 0xf0, 0xf5, 0x0d, 0x02, 0x00, 0xee, 0x10, 0xff, 0x09, 0xc1, 0xf0, 0x4d, 0x41, 0xc8, 0x8d, 0xe3, 0xd4, 0x40, 0x02, 0x00, 0xd4, 0x50, 0x04, 0x00, 0x20, 0x4e, 0x30, 0x5f, 0x3d, 0x02, 0xe0, 0x14, 0x0d, 0x01, 0xe0, 0x04, 0x98, 0x60, 0xdb, 0x00},
			// kwp2000_27_SecurityAccess (150)
			{0x88, 0x90, 0x88, 0x70, 0x88, 0x60, 0xf0, 0x9c, 0xf2, 0xf4, 0xff, 0xff, 0x9a, 0xf4, 0x07, 0xff, 0xc2, 0xfc, 0xff, 0xff, 0xf0, 0xd9, 0xda, 0xff, 0xff, 0xff, 0xf1, 0xc8, 0x0d, 0x37, 0xf3, 0xf8, 0xff, 0xff, 0x49, 0x82, 0x8d, 0x2b, 0xf2, 0xf4, 0xff, 0xff, 0xf4, 0xa4, 0x01, 0x00, 0xf7, 0xfa, 0xff, 0xff, 0xc0, 0xa5, 0x08, 0x51, 0xbc, 0x15, 0xf1, 0xea, 0xc0, 0xe5, 0x46, 0xf5, 0x3c, 0x00, 0xcd, 0x10, 0x47, 0xfe, 0x40, 0x00, 0xed, 0x0d, 0x88, 0x90, 0xc2, 0xfc, 0xff, 0xff, 0xc0, 0xed, 0xe6, 0xfe, 0xff, 0xff, 0xe6, 0xff, 0xff, 0xff, 0xda, 0xff, 0xff, 0xff, 0x08, 0x02, 0xf1, 0xc8, 0x0d, 0x15, 0xe6, 0xf4, 0xff, 0xff, 0x64, 0xf4, 0xff, 0xff, 0xe6, 0xfc, 0xff, 0xff, 0xe6, 0xfd, 0xff, 0xff, 0xf0, 0xe9, 0xda, 0xff, 0xff, 0xff, 0xf1, 0xc8, 0x0d, 0x08, 0xe6, 0xfc, 0xff, 0xff, 0xe6, 0xfd, 0xff, 0xff, 0xf0, 0xe9, 0xda, 0xff, 0xff, 0xff, 0xf1, 0xc8, 0xf1, 0x8c, 0x98, 0x60, 0x98, 0x70, 0x98, 0x90, 0xdb, 0x00},
			// kwp2000_27_SecurityAccessOpel 1(64)
			{0x88, 0x80, 0x88, 0x70, 0x88, 0x60, 0x26, 0xF0, 0x10, 0x00, 0xF0, 0x7C, 0xD4, 0x80, 0x16, 0x00,
			0xE1, 0x0C, 0xF1, 0x2E, 0x69, 0x21, 0x49, 0x21, 0x2D, 0x05, 0x49, 0x20, 0xEA, 0x20, 0x7A, 0x2A,
			0xEA, 0x00, 0xff, 0xff, 0xF2, 0xF6, 0xff, 0xff, 0x9A, 0xF6, 0xff, 0xff, 0xF6, 0x8E, 0xff, 0xff,
			0xF6, 0x8E, 0xff, 0xff, 0xEA, 0xff, 0xff, 0xff, 0xDA, 0xff, 0xff, 0xff, 0xF0, 0xC4, 0xF0, 0xD5},
			// kwp2000_27_SecurityAccessOpel 2(62)
			{0x88, 0x90, 0x88, 0x80, 0x88, 0x70, 0x88, 0x60, 0x26, 0xF0, 0x10, 0x00, 0xF0, 0x9E, 0xF0, 0x7C,
			0xD4, 0x80, 0x18, 0x00, 0xE1, 0x0C, 0xF1, 0x2E, 0x69, 0x21, 0x49, 0x21, 0x2D, 0x05, 0x49, 0x20,
			0xEA, 0xff, 0xff, 0xff, 0xEA, 0xff, 0xff, 0xff, 0xF2, 0xF6, 0xff, 0xff, 0x9A, 0xF6, 0x0A, 0x00,
			0xF6, 0x8E, 0xff, 0xff, 0xF6, 0x8E, 0xff, 0xff, 0xE6, 0xF9, 0x00, 0x10, 0x74, 0xF9},
			// Opel Seed Key (42)
			{0x88, 0x70, 0x88, 0x60, 0xF0, 0x6D, 0x07, 0xFC, 0x23, 0x00, 0x47, 0xFC, 0x23, 0x00, 0x9D, 0x02,
			0xE7, 0xFC, 0xFF, 0x00, 0xE1, 0x0E, 0x0D, 0x17, 0xF0, 0xDE, 0xF0, 0x1F, 0x28, 0xD0, 0x36, 0xF1, 
			0x00, 0x80, 0x8D, 0x0E, 0xF0, 0x1C, 0xC0, 0x2D, 0x5C, 0x2D},
			//Lookup (64)
			{0xE0,0x04,0xF0,0x3F,0xF0,0x2C,0xDC,0x4D,0x49,0x6A,0xFD,0x19,0x00,0x2E,0x28,0x21,
			0xDC,0x4D,0x49,0x6A,0x9D,0x12,0x08,0x21,0x28,0x21,0xDC,0x4D,0x49,0x6A,0x8D,0xFC,
			0xDC,0x4D,0x29,0x6A,0x5C,0x83,0xF6,0xF3,0x0E,0xFE,0xDC,0x5D,0xF4,0x62,0x01,0x00,
			0x29,0x6A,0xC0,0x63,0x5B,0x33,0xF2,0xF4,0x0E,0xFE,0x20,0x2C,0xF1,0x94,0xDB,0x00},
			//Lookup (64)
			{0xE0,0x04,0xF0,0x3F,0xF0,0x2C,0xDC,0x4D,0x49,0x6A,0xBD,0x19,0x00,0x2E,0x28,0x21,
			0xDC,0x4D,0x49,0x6A,0xDD,0x12,0xDC,0x4D,0x49,0x6A,0xDD,0x02,0x28,0x21,0x0D,0xFB,
			0xDC,0x4D,0x29,0x6A,0x5C,0x83,0xF6,0xF3,0x0E,0xFE,0xDC,0x5D,0xF4,0x62,0x01,0x00,
			0x29,0x6A,0xC0,0x63,0x5B,0x33,0xF2,0xF4,0x0E,0xFE,0x20,0x2C,0xF1,0x94,0xDB,0x00},
			//WideLookup (72)
			{0xE0,0x04,0x5C,0x1E,0xF0,0x2C,0xDC,0x4D,0x48,0xFA,0xFD,0x1D,0x00,0x2E,0x28,0x22,
			0xDC,0x4D,0x48,0xFA,0x9D,0x15,0x08,0x22,0x28,0x22,0xDC,0x4D,0x48,0xFA,0x8D,0xFC,
			0xDC,0x4D,0x28,0xFA,0xF0,0x4F,0x5C,0x8F,0x7C,0x84,0xF6,0xF4,0x0C,0xFE,0xF6,0xFF,
			0x0E,0xFE,0xDC,0x5D,0xD4,0xF2,0x02,0x00,0x28,0xFA,0x7B,0xFF,0xF2,0xF4,0x0E,0xFE,
			0x20,0x2C,0x7C,0x12,0xF1,0x94,0xDB,0x00},
			//WideLookup (72)
			{0xE0,0x04,0x5C,0x1E,0xF0,0x2C,0xDC,0x4D,0x48,0xFA,0xBD,0x1D,0x00,0x2E,0x28,0x22,
			0xDC,0x4D,0x48,0xFA,0xDD,0x15,0xDC,0x4D,0x48,0xFA,0xDD,0x02,0x28,0x22,0x0D,0xFB,
			0xDC,0x4D,0x28,0xFA,0xF0,0x4F,0x5C,0x8F,0x7C,0x84,0xF6,0xF4,0x0C,0xFE,0xF6,0xFF,
			0x0E,0xFE,0xDC,0x5D,0xD4,0xF2,0x02,0x00,0x28,0xFA,0x7B,0xFF,0xF2,0xF4,0x0E,0xFE,
			0x20,0x2C,0x7C,0x12,0xF1,0x94,0xDB,0x00},
			//lookup (74)
			{0xF0,0x3E,0xDC,0x4D,0x99,0x8C,0xF0,0x1C,0xF0,0x2C,0x7C,0x8F,0x00,0x1F,0xDC,0x4D,
			0x49,0x6D,0x8D,0x1B,0xC0,0x84,0x28,0x41,0x00,0x24,0xDC,0x4D,0x49,0x6E,0x9D,0x2D,
			0x20,0x24,0xDC,0x4D,0x49,0x6D,0x9D,0xFD,0x28,0x12,0xDC,0x4D,0x29,0x69,0x5C,0x83,
			0xF6,0xF3,0x0E,0xFE,0xDC,0x5D,0xF4,0x61,0x01,0x00,0x29,0x69,0xC0,0x63,0x5B,0x33,
			0xF2,0xF4,0x0E,0xFE,0x20,0x1C,0xF1,0x92,0xDB,0x00},
			//Widelookup (140)
			{0xDC,0x4D,0x98,0x4C,0xF0,0x1C,0xF0,0x2C,0x7C,0x8F,0x5C,0x1F,0x00,0x1F,0xDC,0x4D,
			0x48,0xED,0x8D,0x20,0xC0,0x84,0x28,0x41,0x5C,0x14,0x00,0x24,0xDC,0x4D,0x48,0xEE,
			0x9D,0x35,0x20,0x24,0xDC,0x4D,0x48,0xED,0x9D,0xFD,0x28,0x14,0xDC,0x4D,0x28,0xE9,
			0xF0,0x4E,0x5C,0x8E,0x7C,0x84,0xF6,0xFE,0x0E,0xFE,0xF6,0xF4,0x0C,0xFE,0xDC,0x5D,
			0xD4,0xE1,0x02,0x00,0x28,0xE9,0x7B,0xEE,0xF2,0xF4,0x0E,0xFE,0x20,0x1C,0x7C,0x11,
			0xF1,0x92,0xDB,0x00,0xDC,0x4D,0x48,0xEA,0xFD,0x1B,0x28,0x14,0xDC,0x4D,0x48,0xED,
			0x8D,0xFC,0x28,0x12,0xDC,0x4D,0x28,0xE9,0xF0,0x4E,0x5C,0x8E,0x7C,0x84,0xF6,0xFE,
			0x0E,0xFE,0xF6,0xF4,0x0C,0xFE,0xDC,0x5D,0xD4,0xE1,0x02,0x00,0x28,0xE9,0x7B,0xEE,
			0xF2,0xF4,0x0E,0xFE,0x20,0x1C,0x7C,0x11,0xF1,0x92,0xDB,0x00},
			//Lookup (122)
			{0xF0,0x3E,0xDC,0x4D,0x99,0x8C,0xF0,0x1C,0xF0,0x2C,0x7C,0x8F,0x00,0x1F,0xDC,0x4D,
			0x49,0x6D,0xCD,0x1B,0xC0,0x84,0x28,0x41,0x00,0x24,0xDC,0x4D,0x49,0x6E,0xDD,0x2D,
			0x20,0x24,0xDC,0x4D,0x49,0x6D,0xDD,0xFD,0x28,0x12,0xDC,0x4D,0x29,0x69,0x5C,0x83,
			0xF6,0xF3,0x0E,0xFE,0xDC,0x5D,0xF4,0x61,0x01,0x00,0x29,0x69,0xC0,0x63,0x5B,0x33,
			0xF2,0xF4,0x0E,0xFE,0x20,0x1C,0xF1,0x92,0xDB,0x00,0xDC,0x4D,0x49,0x6A,0xBD,0x17,
			0x28,0x12,0xDC,0x4D,0x49,0x6D,0xCD,0xFC,0x28,0x11,0xDC,0x4D,0x29,0x69,0x5C,0x83,
			0xF6,0xF3,0x0E,0xFE,0xDC,0x5D,0xF4,0x61,0x01,0x00,0x29,0x69,0xC0,0x63,0x5B,0x33,
			0xF2,0xF4,0x0E,0xFE,0x20,0x1C,0xF1,0x92,0xDB,0x00},
			//WideLookup (84)
			{0xDC,0x4D,0x98,0x4C,0xF0,0x1C,
			0xF0,0x2C,0x7C,0x8F,0x5C,0x1F,0x00,0x1F,0xDC,0x4D,0x48,0xED,0xCD,0x20,0xC0,0x84,
			0x28,0x41,0x5C,0x14,0x00,0x24,0xDC,0x4D,0x48,0xEE,0xDD,0x35,0x20,0x24,0xDC,0x4D,
			0x48,0xED,0xDD,0xFD,0x28,0x14,0xDC,0x4D,0x28,0xE9,0xF0,0x4E,0x5C,0x8E,0x7C,0x84,
			0xF6,0xFE,0x0E,0xFE,0xF6,0xF4,0x0C,0xFE,0xDC,0x5D,0xD4,0xE1,0x02,0x00,0x28,0xE9,
			0x7B,0xEE,0xF2,0xF4,0x0E,0xFE,0x20,0x1C,0x7C,0x11,0xF1,0x92,0xDB,0x00},
			//lookup (100)
			{0xF0,0x3E,0xDC,0x4D,0x99,0x2C,0xF0,0x2C,0xC0,0x21,0xE0,0x04,0xE0,0x05,0xE0,0x0F,
			0xDC,0x4D,0x49,0x6A,0xFD,0x13,0x00,0x21,0x28,0x21,0xDC,0x4D,0x49,0x6A,0x9D,0x0C,
			0x08,0x21,0x28,0x21,0xDC,0x4D,0x49,0x6A,0x8D,0xFC,0xDC,0x7D,0x29,0x6A,0xC0,0x64,
			0xF4,0x62,0x01,0x00,0x29,0x6A,0xC0,0x65,0x20,0x2C,0xF0,0xF2,0x00,0xC1,0x00,0xCF,
			0xF0,0x24,0xDC,0x4D,0x99,0x8C,0xC0,0x84,0x48,0x20,0x2D,0x13,0xDC,0x4D,0xA9,0x6C,
			0xC0,0x63,0x40,0x43,0xED,0x07,0x20,0x34,0x1B,0x32,0x5B,0x55,0xF2,0xF3,0x0E,0xFE,
			0x00,0x43,0xDB,0x00},
			//WideLookup (122)
			{0xF0,0xAE,0xDC,0x4D,0x98,0xEC,0xE0,0x04,0xE0,0x05,0xE0,0x0F,0xF0,0x1E,0x66,0xF1,
			0xFF,0x00,0x5C,0x11,0xF0,0x2C,0xDC,0x4D,0x48,0xAA,0xFD,0x13,0x00,0x21,0x28,0x22,
			0xDC,0x4D,0x48,0xAA,0x9D,0x0B,0x08,0x22,0x28,0x22,0xDC,0x4D,0x48,0xAA,0x8D,0xFC,
			0xF0,0x4A,0xDC,0x6D,0x28,0x4A,0xD4,0x52,0x02,0x00,0x28,0x5A,0x20,0x2C,0x7C,0x12,
			0xF0,0xF2,0x5C,0x1E,0x5C,0x1F,0x00,0xCE,0x00,0xCF,0xF0,0x24,0xDC,0x4D,0x98,0x4C,
			0x48,0x20,0x2D,0x12,0xDC,0x4D,0xA8,0x3C,0x40,0x43,0xED,0x07,0x20,0x34,0x1B,0x32,
			0x7B,0x55,0xF2,0xF3,0x0E,0xFE,0x00,0x43,0x0D,0x07,0xF0,0x14,0x20,0x13,0x1B,0x12,
			0x7B,0x55,0xF2,0xF3,0x0E,0xFE,0x20,0x43,0xDB,0x00},
			//Lookup (120)
			{0xF0,0xAE,0xDC,0x4D,0x99,0x6C,0xC0,0x6E,0xE0,0x04,0xE0,0x05,0xE0,0x0F,0xF0,0x3A,
			0xF0,0x1E,0xF0,0x2C,0xDC,0x4D,0x49,0x6A,0xBD,0x13,0x00,0x21,0x28,0x21,0xDC,0x4D,
			0x49,0x6A,0xDD,0x0C,0xDC,0x4D,0x49,0x6A,0xDD,0x02,0x28,0x21,0x0D,0xFB,0xDC,0x7D,
			0x29,0x6A,0xC0,0x64,0xF4,0x62,0x01,0x00,0x29,0x6A,0xC0,0x65,0x20,0x2C,0xF0,0xF2,
			0x00,0xCE,0x00,0xCF,0xF0,0x24,0xDC,0x4D,0x99,0x8C,0xD0,0x84,0x48,0x20,0x2D,0x13,
			0xDC,0x4D,0xA9,0x6C,0xD0,0x63,0x40,0x43,0xAD,0x07,0x20,0x34,0x1B,0x32,0x5B,0x55,
			0xF2,0xF3,0x0E,0xFE,0x00,0x43,0x0D,0x07,0xF0,0x14,0x20,0x13,0x1B,0x12,0x5B,0x55,
			0xF2,0xF1,0x0E,0xFE,0x20,0x41,0xDB,0x00},
			//Lookup (122)
			{0xF0,0xAE,0xDC,0x4D,0x98,0xEC,0xE0,0x04,0xE0,0x05,0xE0,0x0F,0xF0,0x1E,0x66,0xF1,
			0xFF,0x00,0x5C,0x11,0xF0,0x2C,0xDC,0x4D,0x48,0xAA,0xBD,0x13,0x00,0x21,0x28,0x22,
			0xDC,0x4D,0x48,0xAA,0xDD,0x0B,0xDC,0x4D,0x48,0xAA,0xDD,0x02,0x28,0x22,0x0D,0xFB,
			0xF0,0x4A,0xDC,0x6D,0x28,0x4A,0xD4,0x52,0x02,0x00,0x28,0x5A,0x20,0x2C,0x7C,0x12,
			0xF0,0xF2,0x5C,0x1E,0x5C,0x1F,0x00,0xCE,0x00,0xCF,0xF0,0x24,0xDC,0x4D,0x98,0x4C,
			0x48,0x20,0x2D,0x12,0xDC,0x4D,0xA8,0x3C,0x40,0x43,0xAD,0x07,0x20,0x34,0x0B,0x32,
			0x6B,0x55,0xF2,0xF3,0x0E,0xFE,0x00,0x43,0x0D,0x07,0xF0,0x14,0x20,0x13,0x0B,0x12,
			0x6B,0x55,0xF2,0xF3,0x0E,0xFE,0x20,0x43,0xDB,0x00},
			//Lookup (234)
			{0x88,0x90,0xDC,0x4D,0x99,0x6C,0xC0,0x6B,0x08,0xC1,0xE0,0x04,0xE0,0x05,0xE0,0x01,
			0x66,0xFE,0xFF,0x00,0xF0,0x3E,0xF0,0x2C,0xDC,0x4D,0x49,0x6A,0xFD,0x13,0x00,0x2B,
			0x28,0x21,0xDC,0x4D,0x49,0x6A,0x9D,0x0C,0x08,0x21,0x28,0x21,0xDC,0x4D,0x49,0x6A,
			0x8D,0xFC,0xDC,0x7D,0x29,0x6A,0xC0,0x64,0xF4,0x62,0x01,0x00,0x29,0x6A,0xC0,0x65,
			0x20,0x2C,0xF0,0x12,0xF0,0xA5,0x28,0xC1,0xDC,0x4D,0x99,0x6C,0x00,0xCB,0xC0,0x6E,
			0xF0,0xB4,0xE0,0x04,0xE0,0x05,0xE0,0x09,0x66,0xFF,0xFF,0x00,0xF0,0x3F,0xF0,0x2C,
			0xDC,0x4D,0x49,0x6A,0xFD,0x13,0x00,0x2E,0x28,0x21,0xDC,0x4D,0x49,0x6A,0x9D,0x0C,
			0x08,0x21,0x28,0x21,0xDC,0x4D,0x49,0x6A,0x8D,0xFC,0xDC,0x7D,0x29,0x6A,0xC0,0x64,
			0xF4,0x62,0x01,0x00,0x29,0x6A,0xC0,0x65,0x20,0x2C,0xF0,0x92,0xF0,0xF4,0x00,0xCE,
			0x1B,0x1E,0xF2,0xF1,0x0E,0xFE,0x00,0xC1,0x00,0xC9,0xDC,0x4D,0x99,0x8C,0xC0,0x84,
			0x48,0xF0,0x2D,0x09,0xDC,0x4D,0xA9,0x6C,0xC0,0x63,0x20,0x34,0x0B,0x3F,0x6B,0x55,
			0xF2,0xF3,0x0E,0xFE,0x00,0x43,0x48,0xB0,0x2D,0x16,0x28,0xC1,0x00,0xCE,0xDC,0x4D,
			0x99,0x6C,0xC0,0x63,0x48,0xF0,0x2D,0x09,0xDC,0x4D,0xA9,0x4C,0xC0,0x42,0x20,0x23,
			0x0B,0x2F,0x6B,0x55,0xF2,0xF2,0x0E,0xFE,0x00,0x32,0x20,0x34,0x0B,0x3B,0x6B,0xAA,
			0xF2,0xF3,0x0E,0xFE,0x00,0x43,0x98,0x90,0xDB,0x00},
			//Lookup (284)
			{0x88,0x90,0xDC,0x4D,0x98,0xBC,0x66,0xFB,0xFF,0x00,0x5C,0x1B,0x08,0xC2,0xE0,0x04,
			0xE0,0x05,0xE0,0x01,0xF0,0x2C,0xDC,0x4D,0x48,0xEA,0xFD,0x13,0x00,0x2B,0x28,0x22,
			0xDC,0x4D,0x48,0xEA,0x9D,0x0B,0x08,0x22,0x28,0x22,0xDC,0x4D,0x48,0xEA,0x8D,0xFC,
			0xF0,0x4E,0xDC,0x6D,0x28,0x4A,0xD4,0x52,0x02,0x00,0x28,0x5A,0x20,0x2C,0x7C,0x12,
			0xF0,0x12,0xF0,0xA5,0x28,0xC2,0xDC,0x4D,0x98,0xEC,0x66,0xFE,0xFF,0x00,0x5C,0x1E,
			0x00,0xCB,0xF0,0xB4,0xE0,0x04,0xE0,0x05,0xE0,0x09,0xF0,0x2C,0xDC,0x4D,0x48,0xFA,
			0xFD,0x13,0x00,0x2E,0x28,0x22,0xDC,0x4D,0x48,0xFA,0x9D,0x0B,0x08,0x22,0x28,0x22,
			0xDC,0x4D,0x48,0xFA,0x8D,0xFC,0xF0,0x4F,0xDC,0x6D,0x28,0x4A,0xD4,0x52,0x02,0x00,
			0x28,0x5A,0x20,0x2C,0x7C,0x12,0xF0,0x92,0xF0,0xF4,0x5C,0x19,0x00,0xCE,0x1B,0x1E,
			0xF2,0xF1,0x0E,0xFE,0x00,0xC1,0x00,0xC9,0xDC,0x4D,0x98,0x4C,0x48,0xF0,0x2D,0x12,
			0xDC,0x4D,0xA8,0x3C,0x40,0x43,0xED,0x07,0x20,0x34,0x1B,0x3F,0x7B,0x55,0xF2,0xF3,
			0x0E,0xFE,0x00,0x43,0x0D,0x07,0xF0,0x24,0x20,0x23,0x1B,0x2F,0x7B,0x55,0xF2,0xF2,
			0x0E,0xFE,0x20,0x42,0x48,0xB0,0x2D,0x28,0x28,0xC2,0x00,0xCE,0xDC,0x4D,0x98,0x3C,
			0x48,0xF0,0x2D,0x12,0xDC,0x4D,0xA8,0x2C,0x40,0x32,0xED,0x07,0x20,0x23,0x1B,0x2F,
			0x7B,0x55,0xF2,0xF2,0x0E,0xFE,0x00,0x32,0x0D,0x07,0xF0,0x13,0x20,0x12,0x1B,0x1F,
			0x7B,0x55,0xF2,0xF1,0x0E,0xFE,0x20,0x31,0x40,0x43,0xED,0x07,0x20,0x34,0x1B,0x3B,
			0x7B,0xAA,0xF2,0xF3,0x0E,0xFE,0x00,0x43,0x0D,0x07,0xF0,0x24,0x20,0x23,0x1B,0x2B,
			0x7B,0xAA,0xF2,0xF2,0x0E,0xFE,0x20,0x42,0x98,0x90,0xDB,0x00},
			//Lookup (70)
			{0xE0,0x04,0xF0,0x3E,0xDC,0x4D,0x99,0x2C,0xC0,0x21,0xF0,0x2C,0xDC,0x4D,0x49,0x6A,
			0xFD,0x19,0x00,0x21,0x28,0x21,0xDC,0x4D,0x49,0x6A,0x9D,0x12,0x08,0x21,0x28,0x21,
			0xDC,0x4D,0x49,0x6A,0x8D,0xFC,0xDC,0x4D,0x29,0x6A,0x5C,0x83,0xF6,0xF3,0x0E,0xFE,
			0xDC,0x5D,0xF4,0x62,0x01,0x00,0x29,0x6A,0xC0,0x63,0x5B,0x33,0xF2,0xF4,0x0E,0xFE,
			0x20,0x2C,0xF1,0x94,0xDB,0x00},
			//Lookup (70)
			{0xE0,0x04,0xF0,0x3E,0xDC,0x4D,0x99,0x2C,0xC0,0x21,0xF0,0x2C,0xDC,0x4D,0x49,0x6A,
			0xBD,0x19,0x00,0x21,0x28,0x21,0xDC,0x4D,0x49,0x6A,0xDD,0x12,0xDC,0x4D,0x49,0x6A,
			0xDD,0x02,0x28,0x21,0x0D,0xFB,0xDC,0x4D,0x29,0x6A,0x5C,0x83,0xF6,0xF3,0x0E,0xFE,
			0xDC,0x5D,0xF4,0x62,0x01,0x00,0x29,0x6A,0xC0,0x63,0x5B,0x33,0xF2,0xF4,0x0E,0xFE,
			0x20,0x2C,0xF1,0x94,0xDB,0x00},
			//lookup (78)
			{0xE0,0x04,0xDC,0x4D,0x98,0x1C,0xC0,0x21,0x5C,0x11,0xF0,0x2C,0xDC,0x4D,0x48,0xEA,
			0xFD,0x1D,0x00,0x21,0x28,0x22,0xDC,0x4D,0x48,0xEA,0x9D,0x15,0x08,0x22,0x28,0x22,
			0xDC,0x4D,0x48,0xEA,0x8D,0xFC,0xDC,0x4D,0x28,0xEA,0xF0,0x4E,0x5C,0x8E,0x7C,0x84,
			0xF6,0xF4,0x0C,0xFE,0xF6,0xFE,0x0E,0xFE,0xDC,0x5D,0xD4,0xE2,0x02,0x00,0x28,0xEA,
			0x7B,0xEE,0xF2,0xF4,0x0E,0xFE,0x20,0x2C,0x7C,0x12,0xF1,0x94,0xDB,0x00},
			//Lookup (78)
			{0xE0,0x04,0xDC,0x4D,0x98,0x1C,0xC0,0x21,0x5C,0x11,0xF0,0x2C,0xDC,0x4D,0x48,0xEA,
			0xBD,0x1D,0x00,0x21,0x28,0x22,0xDC,0x4D,0x48,0xEA,0xDD,0x15,0xDC,0x4D,0x48,0xEA,
			0xDD,0x02,0x28,0x22,0x0D,0xFB,0xDC,0x4D,0x28,0xEA,0xF0,0x4E,0x5C,0x8E,0x7C,0x84,
			0xF6,0xF4,0x0C,0xFE,0xF6,0xFE,0x0E,0xFE,0xDC,0x5D,0xD4,0xE2,0x02,0x00,0x28,0xEA,
			0x7B,0xEE,0xF2,0xF4,0x0E,0xFE,0x20,0x2C,0x7C,0x12,0xF1,0x94,0xDB,0x00},
			//Lookup (38)
			{0xF0,0x3E,0xC0,0x72,0x00,0xC2,0xDC,0x4D,0x99,0x8C,0xC0,0x84,0x5C,0x8E,0x7C,0x1E,
			0x2D,0x09,0xDC,0x4D,0xA9,0x6C,0xC0,0x63,0x20,0x34,0x5C,0x13,0x0B,0xE3,0xF2,0xF3,
			0x0C,0xFE,0x00,0x43,0xDB,0x00},
			//Lookup (13)
			{0xF0,0x3E,0xC0,0x72,0x00,0xC2,0xDC,0x4D,0xA9,0x8C,0xDB,0x00,0xDB},
			//Lookup (14)
			{0xF0,0x3E,0xC0,0x72,0x5C,0x12,0x00,0x2C,0xDC,0x4D,0xA8,0x42,0xDB,0x00},
			//lookup (12)
			{0xF0,0x3D,0xC0,0x72,0x5C,0x12,0x00,0x2C,0xA8,0x42,0xDB,0x00},
			//lookup (38)
			{0xF0,0x3E,0xC0,0x72,0x00,0xC2,0xDC,0x4D,0x99,0x8C,0xD0,0x84,0x5C,0x8E,0x7C,0x1E,
			0x2D,0x09,0xDC,0x4D,0xA9,0x6C,0xD0,0x63,0x20,0x34,0x5C,0x13,0x0B,0xE3,0xF2,0xF3,
			0x0C,0xFE,0x00,0x43,0xDB,0x00},
			//lookup (36)
			{0xF0,0x3E,0xC0,0x72,0x5C,0x12,0x00,0xC2,0xDC,0x4D,0x98,0x4C,0x5C,0x8E,0x2D,0x10,
			0xDC,0x4D,0xA8,0x3C,0x40,0x43,0xED,0x06,0x20,0x34,0x1B,0xE3,0xF2,0xF2,0x0C,0xFE,
			0x00,0x42,0xDB,0x00},
			//LookupZ (48)
			{0xF0,0x3E,
			0xC0,0x72,0x5C,0x12,0x00,0xC2,0xDC,0x4D,0x98,0x4C,0x5C,0x8E,0x2D,0x10,0xDC,0x4D,
			0xA8,0x3C,0x40,0x43,0xAD,0x06,0x20,0x34,0x1B,0xE3,0xF2,0xF2,0x0C,0xFE,0x00,0x42,
			0x0D,0x06,0xF0,0x24,0x20,0x23,0x1B,0xE2,0xF2,0xF2,0x0C,0xFE,0x20,0x42,0xDB,0x00},
			//LookupAA (116)
			{0xD4,0xA0,0x00,0x00,0xD4,0xB0,0x02,0x00,0xDC,0x4F,0xA9,0x4E,0xC0,0x4E,0xF0,0x1A,
			0xC0,0x31,0x1B,0x1E,0xF2,0xF1,0x0E,0xFE,0x00,0xC1,0xF0,0x1B,0xC0,0x31,0x00,0xC1,
			0xDC,0x4D,0xA9,0x4C,0xC0,0x42,0x5C,0x8B,0x7C,0x1B,0x2D,0x0A,0xDC,0x4D,0xF4,0x6C,
			0x01,0x00,0xC0,0x63,0x20,0x32,0x5C,0x13,0x0B,0x3B,0xF2,0xF3,0x0C,0xFE,0x00,0x23,
			0xF0,0x42,0x5C,0x8A,0x7C,0x1A,0x2D,0x15,0x00,0xCE,0xDC,0x4D,0x99,0x4C,0xC0,0x42,
			0x78,0xB0,0x2D,0x09,0xDC,0x4D,0xA9,0x6C,0xC0,0x63,0x20,0x32,0x5C,0x13,0x0B,0x3B,
			0xF2,0xF3,0x0C,0xFE,0x00,0x23,0x20,0x24,0x5C,0x12,0x0B,0x2A,0xF2,0xF2,0x0C,0xFE,
			0x00,0x42,0xDB,0x00},
			//Lookup (144)
			{0xD4,0xA0,0x00,0x00,0xD4,0xB0,0x02,0x00,0xDC,0x4F,0xA9,0x2E,0xC0,0x2E,0xF0,0x1A,
			0xC0,0x31,0x1B,0x1E,0xF2,0xF1,0x0E,0xFE,0xF0,0x2B,0xC0,0x52,0x00,0x21,0x5C,0x12,
			0x00,0xC2,0xDC,0x4D,0xA8,0x2C,0x5C,0x8B,0x2D,0x11,0xDC,0x4D,0xD4,0x3C,0x02,0x00,
			0x40,0x32,0xED,0x07,0xF0,0x12,0x20,0x13,0x1B,0x1B,0xF2,0xF3,0x0C,0xFE,0x20,0x23,
			0x0D,0x05,0x20,0x32,0x1B,0x3B,0xF2,0xF3,0x0C,0xFE,0x00,0x23,0xF0,0x42,0x5C,0x8A,
			0x2D,0x24,0x5C,0x1E,0x00,0xCE,0xDC,0x4D,0x98,0x2C,0x78,0xB0,0x2D,0x10,0xDC,0x4D,
			0xA8,0x3C,0x40,0x32,0xED,0x07,0xF0,0x12,0x20,0x13,0x1B,0x1B,0xF2,0xF3,0x0C,0xFE,
			0x20,0x23,0x0D,0x05,0x20,0x32,0x1B,0x3B,0xF2,0xF3,0x0C,0xFE,0x00,0x23,0x40,0x24,
			0xED,0x07,0xF0,0x14,0x20,0x12,0x1B,0x1A,0xF2,0xF2,0x0C,0xFE,0x20,0x42,0xDB,0x00},
			//Lookup (156)
			{0xD4,0xA0,0x00,0x00,
			0xD4,0xB0,0x02,0x00,0xDC,0x4F,0xA9,0x2E,0xC0,0x2E,0xF0,0x1A,0xC0,0x31,0x1B,0x1E,
			0xF2,0xF1,0x0E,0xFE,0xF0,0x2B,0xC0,0x52,0x00,0x21,0x5C,0x12,0x00,0xC2,0xDC,0x4D,
			0xA8,0x2C,0x5C,0x8B,0x2D,0x11,0xDC,0x4D,0xD4,0x3C,0x02,0x00,0x40,0x32,0xAD,0x07,
			0xF0,0x12,0x20,0x13,0x1B,0x1B,0xF2,0xF3,0x0C,0xFE,0x20,0x23,0x0D,0x05,0x20,0x32,
			0x1B,0x3B,0xF2,0xF3,0x0C,0xFE,0x00,0x23,0xF0,0x42,0x5C,0x8A,0x2D,0x24,0x5C,0x1E,
			0x00,0xCE,0xDC,0x4D,0x98,0x2C,0x78,0xB0,0x2D,0x10,0xDC,0x4D,0xA8,0x3C,0x40,0x32,
			0xAD,0x07,0xF0,0x12,0x20,0x13,0x1B,0x1B,0xF2,0xF3,0x0C,0xFE,0x20,0x23,0x0D,0x05,
			0x20,0x32,0x1B,0x3B,0xF2,0xF3,0x0C,0xFE,0x00,0x23,0x40,0x24,0xAD,0x07,0xF0,0x14,
			0x20,0x12,0x1B,0x1A,0xF2,0xF2,0x0C,0xFE,0x20,0x42,0xDB,0x00,0x20,0x24,0x1B,0x2A,
			0xF2,0xF2,0x0C,0xFE,0x00,0x42,0xDB,0x00},
			//Lookup (48)
			{0xF0,0x3E,0xC0,0x63,0xDC,0x4D,0x99,0x4C,0xC0,0x41,0xF0,0x2C,0xDC,0x4D,0x49,0x6A,
			0xFD,0x0A,0x00,0x21,0x28,0x21,0xDC,0x4D,0x49,0x6A,0x9D,0x05,0x08,0x21,0x28,0x21,
			0xDC,0x4D,0x49,0x6A,0x8D,0xFC,0x00,0x21,0xDC,0x4D,0xA9,0x82,0xC0,0x84,0xDB,0x00},
			//Lookup (48)
			{0xDC,0x4D,0x98,0x3C,0xF0,0x13,0x66,0xF1,0xFF,0x00,0x5C,0x11,0xF0,0x2C,0xDC,0x4D,
			0x48,0xEA,0xFD,0x0A,0x00,0x21,0x28,0x22,0xDC,0x4D,0x48,0xEA,0x9D,0x05,0x08,0x22,
			0x28,0x22,0xDC,0x4D,0x48,0xEA,0x8D,0xFC,0x00,0x21,0xDC,0x4D,0xA8,0x42,0xDB,0x00},
			//Lookup (112)
			{0xF0,0x3E,0xDC,0x4D,0x99,0x4C,0xC0,0x41,0xF0,0xEF,0xDC,0x4D,0x99,0x4C,0xC0,0x4F,
			0x66,0xF3,0xFF,0x00,0xF0,0x2C,0xDC,0x4D,0x49,0x6A,0xFD,0x0A,0x00,0x21,0x28,0x21,
			0xDC,0x4D,0x49,0x6A,0x9D,0x05,0x08,0x21,0x28,0x21,0xDC,0x4D,0x49,0x6A,0x8D,0xFC,
			0x20,0x2C,0xF0,0x42,0x00,0xC1,0x66,0xFE,0xFF,0x00,0xF0,0x3E,0xF0,0x1F,0xF0,0x2C,
			0xDC,0x4D,0x49,0x6A,0xFD,0x0A,0x00,0x21,0x28,0x21,0xDC,0x4D,0x49,0x6A,0x9D,0x05,
			0x08,0x21,0x28,0x21,0xDC,0x4D,0x49,0x6A,0x8D,0xFC,0x20,0x2C,0x00,0xC1,0x1B,0x41,
			0xF2,0xF1,0x0E,0xFE,0x00,0xC1,0x00,0xC2,0xDC,0x4D,0xA9,0x8C,0xC0,0x84,0xDB,0x00},
			//Lookup (20)
			{0xD4,0xA0,0x00,0x00,0xD4,0xB0,0x02,0x00,0xDC,0x4F,0xA9,0x8E,0xC0,0x84,0x7C,0x8A,
			0x7C,0x8B,0x1B,0x4A,0xF2,0xF4,0x0E,0xFE,0x00,0x4B,0x00,0xC4,0xDC,0x4D,0xA9,0x8C,
			0xC0,0x84,0xDB,0x00},

			//CRC8 (118)
			{0x88,0x90,0x88,0x80,0x88,0x70,0x88,0x60,0x28,0x04,0xc2,0xf4,0xff,0xff,0xc2,0xf5,
			0xff,0xff,0x1b,0x45,0xf2,0xf4,0x0e,0xfe,0xc2,0xf2,0xff,0xff,0x1b,0x42,0xf2,0xf5,
			0x0c,0xfe,0xf2,0xf4,0x0e,0xfe,0x26,0xf4,0x98,0xf3,0x36,0xf5,0x28,0x00,0x3d,0x04,
			0x8a,0xff,0x02,0xff,0xea,0x00,0xff,0xff,0xf2,0xf4,0xff,0xff,0x66,0xf4,0x00,0x80,
			0x2d,0x1d,0x84,0x00,0xff,0xff,0xa8,0x40,0x66,0xf4,0x00,0x0f,0x46,0xf4,0x00,0x01,
			0x2d,0x15,0xa8,0x40,0x0a,0xf4,0x02,0x02,0xb8,0x40,0xa8,0x50,0x1a,0xf5,0x20,0x20,
			0xb8,0x50,0xa8,0x40,0x0a,0xf4,0x01,0x01,0xb8,0x40,0xa8,0x50,0x1a,0xf5,0x01,0x0f,
			0xb8,0x50,0x88,0x50,0xe0,0x1c},

			//CRC8 Porsche (66)
			{0x88, 0x90, 0x88, 0x80, 0xe0, 0x0f, 0xf0, 0x8c, 0xf0, 0x9d, 0x0d, 0x10, 0xdc,
			0x09, 0xa9, 0x88, 0xc0, 0x8a, 0xe0, 0x0b, 0xd4, 0x40, 0x04, 0x00, 0xd4, 0x50,
			0x06, 0x00, 0x00, 0x4a, 0x10, 0x5b, 0xc4, 0x40, 0x04, 0x00, 0xc4, 0x50, 0x06,
			0x00, 0x08, 0x81, 0x18, 0x90, 0xf0, 0x4f, 0x08, 0xf1, 0x40, 0x4e, 0x8d, 0xec,
			0xd4, 0x40, 0x04, 0x00, 0xd4, 0x50, 0x06, 0x00, 0x98, 0x80, 0x98, 0x90, 0xdb, 0x00},

			//RSA,Calling,Sub (52)
			{0x8a,0xff,0x52,0xff,0xda,0xff,0xff,0xff,0xf3,0xf8,0xff,0xff,0x2d,0x27,0x25,0x8f,
			0xff,0xff,0xf3,0xfa,0xff,0xff,0x49,0xa5,0xfd,0x19,0xff,0xff,0xff,0xff,0xe6,0xfc,
			0xff,0xff,0xe0,0x0d,0xe6,0xfe,0xff,0xff,0xda,0xff,0xff,0xff,0xe6,0xfc,0xff,0xff,
			0xe0,0x0d,0xe6,0xfe},
			//CRC32,ME71,Sub (118)
			{0x88,0x90,0x88,0x80,0x88,0x70,0x88,0x60,0x28,0x06,0xc2,0xf4,0xff,0xff,0xc2,0xf5,
			0xff,0xff,0x1b,0x45,0xf2,0xf4,0x0e,0xfe,0xc2,0xf2,0xff,0xff,0x1b,0x42,0xf2,0xf5,
			0x0c,0xfe,0xf2,0xf4,0x0e,0xfe,0x26,0xf4,0x98,0xf3,0x36,0xf5,0x28,0x00,0xea,0x20,
			0xff,0xff,0xf3,0xf8,0xff,0xbd,0x47,0xf8,0x33,0x00,0xea,0x30,0xff,0xff,0xf3,0xfa,
			0xff,0xbd,0x47,0xfa,0x33,0x00,0xea,0x30,0xff,0xff,0xff,0xff,0xf3,0xf6,0xff,0xff,
			0xea,0x30,0xff,0xff,0xf3,0xf4,0xff,0xff,0x47,0xf4,0x33,0x00,0xea,0x30,0xff,0xff,
			0xe1,0x12,0xf7,0xf2,0xff,0xff,0xe1,0x28,0xf7,0xf8,0xff,0xff,0xf3,0xf8,0xff,0xbd,
			0xf7,0xf8,0xff,0xff,0xf7,0xfa},
			//CRC32,ME75,Sub (118)
			{0x88,0x90,0x88,0x80,0x88,0x70,0x88,0x60,0x28,0x06,0xc2,0xf4,0xff,0xa8,0xc2,0xf5,
			0xff,0xa8,0x1b,0x45,0xf2,0xf4,0x0e,0xfe,0xc2,0xf2,0xff,0xa8,0x1b,0x42,0xf2,0xf5,
			0x0c,0xfe,0xf2,0xf4,0x0e,0xfe,0x26,0xf4,0x98,0xf3,0x36,0xf5,0x28,0x00,0xea,0x20,
			0xff,0xff,0xf3,0xf8,0x7a,0xbb,0x47,0xf8,0x33,0x00,0xea,0x30,0xff,0xff,0xf3,0xfa,
			0x8a,0xbb,0x47,0xfa,0x33,0x00,0xea,0x30,0xff,0xff,0x4f,0xff,0xf3,0xf6,0xff,0xa8,
			0xea,0x30,0xff,0xff,0xf3,0xf4,0xff,0xa8,0x47,0xf4,0x33,0x00,0xea,0x30,0xff,0xff,
			0xe1,0x12,0xf7,0xf2,0xff,0xa8,0xe1,0x28,0xf7,0xf8,0xff,0xa8,0xf3,0xf8,0x7a,0xbb,
			0xf7,0xf8,0xff,0xa8,0xf7,0xfa},
			//CRC32, ME75 Porsche Sub (len 110)
			{0x88, 0x90, 0x88, 0x80, 0x88, 0x70, 0x88, 0x60, 0x28, 0x02, 0xe0, 0x0f, 0xf2,
			0xf6, 0xff, 0xff, 0xf2, 0xf7, 0xff, 0xff, 0xf0, 0x8c, 0xf0, 0x9d, 0x0d, 0x1e,
			0xdc, 0x09, 0xa9, 0x88, 0xf0, 0x56, 0x51, 0xa8, 0xb9, 0xa0, 0xe6, 0xf4, 0xff,
			0xff, 0xe6, 0xf5, 0xff, 0xff, 0xa9, 0x60, 0xc0, 0x62, 0x5c, 0x22, 0xe0, 0x03,
			0x00, 0x42, 0x10, 0x53, 0xda, 0xff, 0xff, 0xff, 0xe6, 0x00, 0xff, 0xff, 0xf0,
			0x46, 0xf0, 0x57, 0xf1, 0x89, 0xf1, 0x9a, 0x7c, 0x85, 0x50, 0x4a, 0x50, 0x5b,
			0xf0, 0x64, 0xf0, 0x75, 0x08, 0x81, 0x18, 0x90, 0xf0, 0x4f, 0x08, 0xf1, 0x40,
			0x4e, 0x8d, 0xde, 0xf0, 0x46, 0xf0, 0x57, 0x08, 0x02, 0x98, 0x60, 0x98, 0x70,
			0x98, 0x80, 0x98, 0x90, 0xdb, 0x00},
			//Test,Sub (len 59)
			{0x88,0xD0,0x88,0xC0,0x88,0x90,0x88,0x80,0x88,0x70,0x88,0x60,0x26,0xF0,0x0A,0x00,
			0xE0,0x04,0xC4,0x40,0x08,0x00,0xE0,0x06,0xE0,0x07,0xE0,0x08,0xE0,0x09,0xD4,0x40,
			0x12,0x00,0xD4,0x50,0x14,0x00,0xB8,0x40,0xC4,0x50,0x02,0x00,0xDC,0x55,0x98,0xA4,
			0xA8,0xB4,0xC4,0xA0,0x04,0x00,0xC4,0xB0,0x06,0x00,0x0D},
			//SetDTCme75 (len 99)
			{0x88,0x60,0xF0,0x6C,0xD4,0x40,0x02,0x00,0x9A,0xF4,0x1F,0x00,0xE6,0xF5,0xff,0xff,
			0xC0,0xC2,0x5C,0x12,0x00,0x52,0xA8,0x25,0x9A,0xF2,0x02,0x00,0x8A,0xF4,0x15,0xC0,
			0xD4,0x40,0x02,0x00,0x88,0x40,0xC0,0xCC,0xDA,0xff,0xff,0xff,0x08,0x02,0xC0,0xC4,
			0x5C,0x14,0xD4,0x54,0xff,0xff,0x9A,0xF5,0x3C,0xC0,0xD4,0x40,0x02,0x00,0x1A,0xF4,
			0x10,0x10,0xC4,0x40,0x02,0x00,0xEA,0x00,0xff,0xff,0xD4,0x40,0x02,0x00,0x8A,0xF4,
			0x0C,0x00,0xC0,0xC5,0x5C,0x15,0xD4,0x25,0xff,0xff,0x9A,0xF2,0x06,0x00,0x88,0x40,
			0xC0,0xCC,0xDA,0xff,0xff,0xff,0x08,0x02,0x0D,0x24,0xD4,0x40,0x02,0x00,0x9A,0xF4,
			0x09,0x10,0xC0,0xC5,0x5C,0x15,0xD4,0x25,0xff,0xff,0x8A,0xF2,0x03,0x10,0xC0,0xCC,
			0xDA,0xff,0xff,0xff,0xC0,0xC4,0x5C,0x14,0xD4,0x54,0xff,0xff,0x7C,0x85,0x66,0xF5,
			0x0F,0x00,0xD4,0x40,0x02,0x00,0x7C,0x84,0x66,0xF4,0x0F,0x00,0x40,0x45,0x2D,0x09,
			0xD4,0x40,0x02,0x00,0x9A,0xF4,0x05,0x00,0x88,0x40,0xC0,0xCC,0xDA,0xff,0xff,0xff,
			0x08,0x02,0xD4,0x40,0x02,0x00,0xE6,0xF5,0xff,0xff,0xC0,0xC2,0x5C,0x12,0x00,0x52,
			0xB8,0x45,0x98,0x60,0xDB,0x00},
//			 0x88,0x60,0xF0,0x6C,0xD4,0x40,0x02,0x00,0x9A,0xF4,0x1F,0x00,0xE6,0xF5,0x3A,0xB2,0xC0,0xC2,0x5C,0x12,0x00,0x52,0xA8,0x25,0x9A,0xF2,0x02,0x00,0x8A,0xF4,0x15,0xC0,0xD4,0x40,0x02,0x00,0x88,0x40,0xC0,0xCC,0xDA,0x85,0x0E,0x87,0x08,0x02,0xC0,0xC4,0x5C,0x14,0xD4,0x54,0x3A,0xB2,0x9A,0xF5,0x3C,0xC0,0xD4,0x40,0x02,0x00,0x1A,0xF4,0x10,0x10,0xC4,0x40,0x02,0x00,0xEA,0x00,0x04,0x98,0xD4,0x40,0x02,0x00,0x8A,0xF4,0x0C,0x00,0xC0,0xC5,0x5C,0x15,0xD4,0x25,0x3A,0xB2,0x9A,0xF2,0x06,0x00,0x88,0x40,0xC0,0xCC,0xDA,0x85,0xF4,0x8A,0x08,0x02,0x0D,0x24,0xD4,0x40,0x02,0x00,0x9A,0xF4,0x09,0x10,0xC0,0xC5,0x5C,0x15,0xD4,0x25,0x3A,0xB2,0x8A,0xF2,0x03,0x10,0xC0,0xCC,0xDA,0x85,0x9E,0x8C,0xC0,0xC4,0x5C,0x14,0xD4,0x54,0x3A,0xB2,0x7C,0x85,0x66,0xF5,0x0F,0x00,0xD4,0x40,0x02,0x00,0x7C,0x84,0x66,0xF4,0x0F,0x00,0x40,0x45,0x2D,0x09,0xD4,0x40,0x02,0x00,0x9A,0xF4,0x05,0x00,0x88,0x40,0xC0,0xCC,0xDA,0x85,0xF6,0x8D,0x08,0x02,0xD4,0x40,0x02,0x00,0xE6,0xF5,0x3A,0xB2,0xC0,0xC2,0x5C,0x12,0x00,0x52,0xB8,0x45,0x98,0x60,0xDB,0x00
			//0x88,0x60,0xF0,0x6C,0xD4,0x40,0x02,0x00,0x9A,0xF4,0x1F,0x00,0xE6,0xF5,0x04,0xBB,0xC0,0xC2,0x5C,0x12,0x00,0x52,0xA8,0x25,0x9A,0xF2,0x02,0x00,0x8A,0xF4,0x15,0xC0,0xD4,0x40,0x02,0x00,0x88,0x40,0xC0,0xCC,0xDA,0x84,0xB8,0x65,0x08,0x02,0xC0,0xC4,0x5C,0x14,0xD4,0x54,0x04,0xBB,0x9A,0xF5,0x3C,0xC0,0xD4,0x40,0x02,0x00,0x1A,0xF4,0x10,0x10,0xC4,0x40,0x02,0x00,0xEA,0x00,0xFA,0x76,0xD4,0x40,0x02,0x00,0x8A,0xF4,0x0C,0x00,0xC0,0xC5,0x5C,0x15,0xD4,0x25,0x04,0xBB,0x9A,0xF2,0x06,0x00,0x88,0x40,0xC0,0xCC,0xDA,0x84,0xE6,0x69,0x08,0x02,0x0D,0x24,0xD4,0x40,0x02,0x00,0x9A,0xF4,0x09,0x10,0xC0,0xC5,0x5C,0x15,0xD4,0x25,0x04,0xBB,0x8A,0xF2,0x03,0x10,0xC0,0xCC,0xDA,0x84,0xB2,0x6B,0xC0,0xC4,0x5C,0x14,0xD4,0x54,0x04,0xBB,0x7C,0x85,0x66,0xF5,0x0F,0x00,0xD4,0x40,0x02,0x00,0x7C,0x84,0x66,0xF4,0x0F,0x00,0x40,0x45,0x2D,0x09,0xD4,0x40,0x02,0x00,0x9A,0xF4,0x05,0x00,0x88,0x40,0xC0,0xCC,0xDA,0x84,0xFE,0x6C,0x08,0x02,0xD4,0x40,0x02,0x00,0xE6,0xF5,0x04,0xBB,0xC0,0xC2,0x5C,0x12,0x00,0x52,0xB8,0x45,0x98,0x60,0xDB,0x00)
			//SetDTCME75Porsche (len 308)
			{0x88, 0xff, 0x88, 0xff, 0x88, 0xff, 0x88, 0xff, 0xff, 0xff, 0x26, 0xf0, 0xff, 0xff,
			0xe6, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x5c, 0x15, 0x00, 0x45, 0xa8, 0x54, 
			0xc4, 0x50, 0x10, 0x00, 0x88, 0x50, 0xd4, 0xc0, 0x42, 0x00, 0xda, 0xff, 0xff, 0xff, 
			0x08, 0x02, 0xa8, 0x54, 0xc4, 0x50, 0x20, 0x00, 0xd4, 0x40, 0x40, 0x00, 0x46, 0xf4,
			0xf1, 0x00, 0xea, 0xe0, 0xf6, 0x95, 0xd4, 0x20, 0x42, 0x00, 0x7c, 0x82, 0x66, 0xf2,
			0x0f, 0x00, 0xf4, 0xff, 0xff, 0xff, 0xc0, 0x84, 0x46, 0xf4, 0xff, 0x00, 0x3d, 0x12,
			0xd4, 0x40, 0x40, 0x00, 0xd7, 0x40, 0xe1, 0x00, 0xf6, 0xf4, 0xff, 0xff, 0xe6, 0xf2,
			0xff, 0xff, 0xd7, 0x40, 0xe1, 0x00, 0x74, 0xf2, 0xff, 0xff, 0xd4, 0x20, 0x42, 0x00,
			0x1a, 0xf2, 0x08, 0x0f, 0xc4, 0x20, 0x42, 0x00, 0xe1, 0x08, 0xe4, 0x80, 0x22, 0x00,
			0xf2, 0xf4, 0xff, 0xff, 0xea, 0x20, 0x46, 0x95, 0xf6, 0x8e, 0xff, 0xff, 0xd4, 0x40,
			0x42, 0x00, 0x88, 0x40, 0xd4, 0xc0, 0x42, 0x00, 0xda, 0xff, 0xff, 0xff, 0x08, 0x02,
			0xa8, 0x54, 0xc4, 0x50, 0x08, 0x00, 0xd4, 0x40, 0x20, 0x00, 0x50, 0x54, 0xc4, 0x50,
			0x1c, 0x00, 0xd4, 0x20, 0x08, 0x00, 0x7c, 0x82, 0x66, 0xf2, 0x0f, 0x00, 0xf4, 0xff,
			0xff, 0xff, 0xe4, 0x80, 0x18, 0x00, 0xd4, 0x40, 0x08, 0x00, 0x9a, 0xf4, 0x44, 0x00,
			0x66, 0xf4, 0x00, 0x0f, 0xea, 0x20, 0xaa, 0x04, 0xd4, 0x40, 0x40, 0x00, 0xd7, 0x50,
			0xe1, 0x00, 0xf4, 0xa4, 0xff, 0xff, 0xcc, 0x00, 0x49, 0xa0, 0x2d, 0x2c, 0xd4, 0x40,
			0x40, 0x00, 0xd7, 0x50, 0xe1, 0x00, 0xf4, 0xa4, 0xff, 0xff, 0xcc, 0x00, 0xc0, 0xa5,
			0xf0, 0x25, 0x5c, 0x22, 0x00, 0x25, 0xf4, 0x80, 0x18, 0x00, 0xc0, 0x84, 0x00, 0x24,
			0xd7, 0x50, 0xe1, 0x00, 0xf4, 0x82, 0xff, 0xff, 0xcc, 0x00, 0x49, 0x80, 0x2d, 0x16,
			0xd4, 0x40, 0x40, 0x00, 0xd7, 0x50, 0xe1, 0x00, 0xf4, 0xa4, 0xff, 0xff, 0xcc, 0x00,
			0xc0, 0xa5, 0xf0, 0x25, 0x5c, 0x22, 0x00, 0x25, 0xf4, 0x80, 0x18, 0x00, 0xc0, 0x84,
			0x00, 0x24, 0xd7, 0x50, 0xe1, 0x00, 0xf4, 0x82, 0xff, 0xff, 0xcc, 0x00, 0x29, 0x81, 
			0x0d, 0x02},
			//SetDTCME75Porsche (len 308)
			{0x88, 0x90, 0x88, 0x80, 0x88, 0x70, 0x88, 0x60, 0x26, 0xf0, 0x1e, 0x00, 0xf0, 0x9c, 
			0xff, 0xff, 0xff, 0xff, 0xf0, 0xd9, 0x5c, 0x1d, 0xc4, 0xd0, 0x10, 0x00, 0x00, 0xcd, 
			0xa8, 0xcc, 0xc4, 0xc0, 0x02, 0x00, 0x88, 0xc0, 0xf0, 0xc9, 0xff, 0xff, 0xff, 0xff, 
			0x08, 0x02, 0xa8, 0x84, 0xc4, 0x80, 0x0e, 0x00, 0x46, 0xf9, 0xf3, 0x00, 0xea, 0xe0, 
			0xa2, 0x50, 0xd4, 0x60, 0x26, 0x00, 0x7c, 0x86, 0x66, 0xf6, 0x0f, 0x00, 0xff, 0xff, 
			0xff, 0xff, 0xc0, 0xe6, 0x46, 0xff, 0xff, 0x00, 0x3d, 0x10, 0xe6, 0xf6, 0xff, 0xff, 
			0xd7, 0x40, 0xe1, 0x00, 0xff, 0xff, 0xff, 0xff, 0xd7, 0x40, 0xe1, 0x00, 0xff, 0xff, 
			0xff, 0xff, 0xd4, 0x70, 0x26, 0x00, 0x1a, 0xf7, 0x08, 0x0f, 0xc4, 0x70, 0x26, 0x00, 
			0xe1, 0x0c, 0xe4, 0xc0, 0x0a, 0x00, 0xff, 0xff, 0xff, 0xff, 0xea, 0x20, 0x12, 0x50, 
			0xff, 0xff, 0xff, 0xff, 0xd4, 0x80, 0x26, 0x00, 0x88, 0x80, 0xf0, 0xc9, 0xda, 0xff, 
			0xff, 0xff, 0x08, 0x02, 0xc8, 0x04, 0xa8, 0x80, 0xd4, 0x60, 0x0e, 0x00, 0x50, 0x86, 
			0xc4, 0x80, 0x0c, 0x00, 0xa8, 0x70, 0x7c, 0x87, 0x66, 0xf7, 0x0f, 0x00, 0xff, 0xff, 
			0xff, 0xff, 0xff, 0xff, 0x9a, 0xf7, 0x33, 0x00, 0xa8, 0xc0, 0x66, 0xfc, 0x00, 0x0f, 
			0x48, 0xc0, 0x2d, 0x2e, 0xd7, 0x40, 0xe1, 0x00, 0xff, 0xff, 0xff, 0xff, 0x2d, 0x1f, 
			0xd7, 0x40, 0xe1, 0x00, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xe7, 0xf0, 0xc7, 0x5c, 0x2c, 
			0x00, 0xc7, 0xc0, 0xc7, 0x00, 0xc7, 0xd7, 0x40, 0xe1, 0x00, 0xff, 0xff, 0xff, 0xff, 
			0x2d, 0x10, 0xd7, 0x40, 0xe1, 0x00, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xe7, 0xf0, 0xc7, 
			0x5c, 0x2c, 0x00, 0xc7, 0xc0, 0xc7, 0x00, 0xc7, 0xd7, 0x40, 0xe1, 0x00, 0xff, 0xff, 
			0xff, 0xff, 0x29, 0xe1, 0x0d, 0x02, 0xe7, 0xfe, 0xff, 0x00, 0x47, 0xfe, 0xff, 0x00, 
			0x3d, 0x02, 0xe0, 0x17, 0x0d, 0x01, 0xe0, 0x07, 0xf0, 0x87, 0x0d, 0x01, 0xe0, 0x08, 
			0x48, 0x80, 0x2d, 0x17, 0xf0, 0x89, 0x5c, 0x28, 0xc0, 0xc7, 0x00, 0x87, 0xd7, 0x40, 
			0x06, 0x02, 0xff, 0xff, 0xff, 0xff, 0x49, 0xe0, 0x2d, 0x0d, 0xf0, 0x89, 0x5c, 0x28},
			//SetDTCME71 (len 71)
			{0x88,0x60,0xF0,0x6C,0xD4,0x40,0x02,0x00,0x9A,0xF4,0x11,0x00,0xC0,0xC5,0x5C,0x15,0xD4,
			0x25,0x04,0xBB,0x9A,0xF2,0x02,0x00,0x8A,0xF4,0x09,0xC0,0xD4,0x40,0x02,0x00,0x88,0x40,
			0xC0,0xCC,0xDA,0xff,0xff,0xff,0x08,0x02,0xEA,0x00,0xBC,0xEA,0xD4,0x40,0x02,0x00,0x8A,
			0xF4,0x0C,0x00,0xC0,0xC5,0x5C,0x15,0xD4,0x25,0x04,0xBB,0x9A,0xF2,0x06,0x00,0x88,0x40,
			0xC0,0xCC,0xDA,0xff,0xff,0xff,0x08,0x02,0x0D,0x24,0xD4,0x40,0x02,0x00,0x9A,0xF4,0x09,
			0x10,0xC0,0xC5,0x5C,0x15,0xD4,0x25,0x04,0xBB,0x8A,0xF2,0x03,0x10,0xC0,0xCC,0xDA,0xff,
			0xff,0xff,0xC0,0xC4,0x5C,0x14,0xD4,0x54,0x04,0xBB,0x7C,0x85,0x66,0xF5,0x0F,0x00,0xD4,
			0x40,0x02,0x00,0x7C,0x84,0x66,0xF4,0x0F,0x00,0x40,0x45,0x2D,0x09,0xD4,0x40,0x02,0x00,
			0x9A,0xF4,0x05,0x00,0x88,0x40,0xC0,0xCC,0xDA,0xff,0xff,0xff,0x08,0x02,0xD4,0x40,0x02,
			0x00,0xE6,0xF5,0xff,0xff,0xC0,0xC2,0x5C,0x12,0x00,0x52,0xB8,0x45,0x98,0x60,0xDB,0x00},
			//SetDTC Bentley (len 120)
			{0x88, 0xc0, 0x88, 0x90, 0x88, 0x80, 0x88, 0x70, 0x88, 0x60, 0x26, 0xf0, 0x28, 0x00, 
			0xe6, 0xf4, 0xff, 0xff, 0xd4, 0x50, 0x30, 0x00, 0x5c, 0x15, 0x00, 0x45, 0xa8, 0x54, 
			0xc4, 0x50, 0x02, 0x00, 0x88, 0x50, 0xd4, 0xc0, 0x32, 0x00, 0xda, 0xff, 0xff, 0xff, 
			0x08, 0x02, 0xa8, 0x54, 0xc4, 0x50, 0x0a, 0x00, 0xd4, 0x40, 0x30, 0x00, 0x46, 0xf4, 
			0xd4, 0x00, 0xea, 0xe0, 0xfe, 0xfb, 0xd4, 0x20, 0x32, 0x00, 0x7c, 0x82, 0x66, 0xf2, 
			0x0f, 0x00, 0xf4, 0x82, 0xff, 0xff, 0xc0, 0x84, 0x46, 0xf4, 0xff, 0x00, 0x3d, 0x12, 
			0xd4, 0x40, 0x30, 0x00, 0xd7, 0x40, 0xe1, 0x00, 0xf6, 0xf4, 0xff, 0xff, 0xe6, 0xf2, 
			0xff, 0xff, 0xd7, 0x40, 0xe1, 0x00, 0x74, 0xf2, 0xff, 0xff, 0xd4, 0x20, 0x32, 0x00, 
			0x1a, 0xf2, 0x08, 0x0f, 0xc4, 0x20, 0x32, 0x00},
			//Set DTC ME7.5 (Len 58)
			{0x88, 0x60, 0xf0, 0x6c, 0xd4, 0x40, 0x02, 0x00, 0x9a, 0xf4, 0x11, 0x00, 0xc0, 0xc5, 0x5c, 0x15, 
			0xd4, 0x25, 0xff, 0xff, 0x9a, 0xf2, 0x02, 0x00, 0x8a, 0xf4, 0x09, 0xc0, 0xd4, 0x40, 0x02, 0x00,
			0x88, 0x40, 0xc0, 0xcc, 0xda, 0xff, 0xff, 0xff, 0x08, 0x02, 0xea, 0x00, 0x44, 0x14, 0xd4, 0x40, 
			0x02, 0x00, 0x8a, 0xf4, 0x0c, 0x00, 0xc0, 0xc5, 0x5c, 0x15},
			//Set DTC ME7.6.1 (Len 32)
			{0x88, 0x90, 0x88, 0x80, 0x88, 0x60, 0xF0, 0x9E, 0xF0, 0x8D, 0xF0, 0x6C, 0x47, 0xFC, 0x2C, 0x00,
			0x2D, 0x06, 0x47, 0xFC, 0x2D, 0x00, 0x2D, 0x03, 0x47, 0xFC, 0x2E, 0x00, 0x3D, 0x33, 0xC0, 0xCC,
			0xDA, 0xff, 0xff, 0xff, 0x49, 0x82, 0x3D, 0x0D, 0xDC, 0x09, 0xA9, 0x48, 0xF0, 0xC8, 0xF0, 0xD9,
			0x08, 0xC1, 0x18, 0xD0, 0xDC, 0x0D, 0xA9, 0x2C, 0xDC, 0x09, 0xB9, 0x28, 0xDC, 0x0D, 0xB9, 0x4C},
			//Reset Handler (len 20) (Ferrari)
			{0xe6, 0x08, 0xff, 0xff, 0xe6, 0x86, 0xff, 0xff, 0x9a, 0x89, 0x03, 0xa0, 0xe6, 0x89, 0xff, 0xff, 
			0x0d, 0x02, 0xe6, 0x89},
			//Reset Handler (len 27) (ME7.6.2)
			{0xCA, 0x00, 0x04, 0x02, 0xE6, 0x08, 0x00, 0xFC, 0xE6, 0x09, 0x00, 0xFC, 0xE6, 0x0A, 0x00, 0xFA, 
			0xE6, 0x0B, 0x00, 0xFC, 0xE6, 0x88, 0x00, 0x00, 0x9A, 0x89, 0x03},
			//Chksum803c (len 76) (Ferrari)
			{0x88, 0x90, 0x88, 0x80, 0x88, 0x70, 0x88, 0x60, 0x26, 0xf0, 0xff, 0x00, 0xe1, 0x08, 0xff, 0x80,
			0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0xec, 0x00, 0xf0, 0xc0, 0xe0, 0x1d, 0x00, 0xd0, 0xda, 0xff, 
			0xff, 0xff, 0xf3, 0xf8, 0xff, 0xff, 0x47, 0xf8, 0x55, 0x00, 0xea, 0x20, 0xd4, 0x73, 0x47, 0xf8, 
			0xaa, 0x00, 0x3d, 0x0c, 0xe6, 0xf4, 0xff, 0xff, 0xe6, 0xf5, 0xff, 0xff, 0xdc, 0x55, 0x98, 0xa4, 
			0xa8, 0xb4, 0xc4, 0xa0, 0x02, 0x00, 0xc4, 0xb0, 0x04, 0x00, 0x0d, 0x0b},
			//Chksum803c (len 64) (ME7.6.1)
			{0x88, 0x90, 0x88, 0x80, 0xd7, 0x40, 0x06, 0x00, 0xf2, 0xfc, 0x00, 0x00, 0x46, 0xfc, 0xaa, 0x55,
			0x3d, 0x17, 0xd7, 0x40, 0x23, 0x00, 0xf2, 0xfd, 0xfe, 0x3f, 0x46, 0xfd, 0x55, 0xaa, 0x3d, 0x10, 
			0xd7, 0x40, 0x30, 0x00, 0xf2, 0xfe, 0x00, 0x00, 0x46, 0xfe, 0x5a, 0x5a, 0x3d, 0x09, 0xd7, 0x40, 
			0x33, 0x00, 0xf2, 0xff, 0xfe, 0x3f, 0x46, 0xff, 0xa5, 0xa5, 0x3d, 0x02, 0xe0, 0x1c, 0x0d, 0x01},
			//Chksum803c (len 150) (ME7.5)
			{0x88, 0x90, 0x88, 0x80, 0x88, 0x70, 0x88, 0x60, 0x26, 0xf0, 0x18, 0x00, 0xe1, 0x08, 0xe4, 0x80,
			0x04, 0x00, 0xe1, 0x0a, 0xe4, 0xa0, 0x05, 0x00, 0xec, 0x00, 0xe0, 0x04,	0xe6, 0xf5, 0xff, 0xff, 
			0xb8, 0x40, 0xc4, 0x50, 0x02, 0x00, 0xe0, 0x4c, 0x00, 0xc0,	0xe0, 0x5d, 0x00, 0xd0, 0xff, 0xff, 
			0xff, 0xff, 0xf3, 0xff, 0xff, 0xff, 0x47, 0xf8,	0x55, 0x00, 0xea, 0x20, 0x7c, 0x61, 0x47, 0xf8,
			0xaa, 0x00, 0x3d, 0x0b, 0xe6, 0xff,	0xff, 0xff, 0xe6, 0xff, 0xff, 0xff, 0xdc, 0x55, 0x98, 0x74, 
			0xa8, 0x84, 0x28, 0x70,	0x36, 0xf8, 0x80, 0x00, 0x0d, 0x0a, 0xe6, 0xf4, 0xff, 0xff, 0xe6, 0xf5, 
			0xff, 0xff,	0xdc, 0x55, 0x98, 0x74, 0xa8, 0x84, 0x28, 0x70, 0x36, 0xf8, 0x80, 0x00, 0xf0, 0x47,
			0xf0, 0x58, 0xf0, 0x25, 0x7c, 0xd4, 0x7c, 0xd5, 0x5c, 0x32, 0x70, 0x42, 0xc4, 0x40,	0x0a, 0x00, 
			0xf0, 0x97, 0x66, 0xf9, 0xff, 0x1f, 0x2d, 0x03, 0x08, 0x41, 0xc4, 0x40,	0x0a, 0x00, 0xe0, 0x04, 
			0xe0, 0x05, 0xc4, 0x40, 0x06, 0x00},
			//Chksum803c (len 64) (ME7.1.1)
			{0x88, 0x90, 0x88, 0x80, 0xD7, 0x40, 0xE1, 0x00, 0xF6, 0xff, 0xff, 0xff, 0xD7, 0x40, 0x08, 0x00,
			0xF2, 0xff, 0xff, 0xff, 0x46, 0xFC, 0xAA, 0x55, 0x3D, 0x25, 0xD7, 0x40, 0x33, 0x00, 0xF2, 0xFf,
			0xFf, 0xfF, 0x46, 0xFD, 0x55, 0xAA, 0x3D, 0x1E, 0xD7, 0x40, 0x00, 0x00, 0xF2, 0xFE, 0xff, 0xff,
			0x46, 0xFE, 0x5A, 0x5A, 0x3D, 0x17, 0xD7, 0x40, 0x01, 0x00, 0xF2, 0xFF, 0xff, 0xfF, 0x46, 0xFF},
			//Main ROM chksum validate during boot ME7.6
			{0x88, 0x60, 0xf3, 0xf8, 0x08, 0xfe, 0xea, 0x30, 0x52, 0x0b, 0xe6, 0xf4, 0xff, 0xff, 0xe0, 0x05, 
			0xdc, 0x05, 0xa8, 0x24, 0x46, 0xf2, 0xff, 0xff, 0x3d, 0x02, 0xe0, 0x1c, 0x0d, 0x01, 0xe0, 0x0c, 
			0x48, 0xc0, 0xea, 0x30, 0x52, 0x0b, 0xe6, 0x86, 0xff, 0xff, 0xe6, 0x8b, 0xff, 0xff, 0xe6, 0x0d, 
			0xff, 0xff, 0xd1, 0x80, 0xe6, 0x0e, 0xff, 0xff, 0xe1, 0x0c},
			//Main ROM Chksum ME7.6 (len 58)
			{0xda, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xff, 0x49, 0x21, 0xea, 0x30, 0x42, 0x6f, 0xc2, 0xff, 
			0xff, 0xff, 0x46, 0xfc, 0x08, 0x00, 0xea, 0x90, 0x08, 0x6f, 0xf2, 0xfd, 0xff, 0xff, 0xf2, 0xfe, 
			0xff, 0xff, 0xe0, 0x0c, 0x0d, 0x0a, 0xdc, 0x0e, 0xa8, 0xfd, 0xe0, 0x01, 0x04, 0xff, 0xff, 0xff, 
			0x14, 0xf1, 0xff, 0xff, 0x08, 0xd2, 0x18, 0xe0, 0x08, 0xc1},
			//Main ROM Chksum Ferrari (len 62)
			{0x88, 0x90, 0x88, 0x80, 0x88, 0x70, 0x88, 0x60, 0xda, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xff, 
			0x49, 0x81, 0xea, 0x30, 0x8e, 0x47, 0xf3, 0xff, 0xff, 0xff, 0x49, 0xa4, 0x9d, 0x27, 0xf2, 0xff, 
			0xff, 0xff, 0xf2, 0xff, 0xff, 0xff, 0xe0, 0x07, 0x0d, 0x0a, 0xdc, 0x09, 0xa8, 0x48, 0xe0, 0x05, 
			0x04, 0xff, 0xff, 0xff, 0x14, 0xff, 0xff, 0xff, 0x08, 0x82, 0x18, 0x90, 0x08, 0x71}
		};

unsigned int fs_siglen[NUM_FUNC_SIGS] = {10, 9, 6, 64, 62, 104, 98, 58, 252, 108, 202, 64, 40, 28, 44, 58, 120, 150, 66, 96, 
								88, 108, 6, 48, 40, 48, 62, 92, 108, 18, 24, 20, 44, 12, 8, 12, 16, 34, 28, 14, 
								26, 12, 10, 32,14, 14, 106, 106, 150, 64, 62, 42, 64, 64, 72, 72, 74, 140, 122, 84, 100, 122, 
								120, 122, 234, 284, 70, 70, 78, 78, 38, 13, 14, 12, 38, 36, 48, 116, 144, 156, 
								48, 48, 112, 20, 118, 66, 52, 118, 118, 110, 59, 99, 308, 308, 71, 120, 58, 32,
								20, 27, 76, 64, 150, 64, 58, 58, 62};

//////////////////////////////////////////////////////////////////////
// Table Signatures
//////////////////////////////////////////////////////////////////////
#define NUM_DATA_SIGS	20

unsigned char ts_Tablenames[NUM_DATA_SIGS][255] = 
		{
			{"CRC32_HashTable"},
			{"ME71OBDProgHashTable"},
			{"Do803cChksumLoop"},
			{"Do803cChksumLoop"},
			{"Do803cChksumLoop"},
			{"DTC_LookupTable"},
			{"DTC_LookupTable"},
			{"DTC_LookupTable"},
			{"DTC_FormTable"},
			{"LineariseOilTemp"},
			{"LineariseIAT"},
			{"LineariseMAF"},
			{"LineariseEGT"},
			{"LineariseCTS"},
			{"MultipointChksumBlk"},
			{"MultipointChksumBlk"},
			{"DoCRC8"},
			{"DoCRC8"},
			{"MainROMChksumBlk"},
			{"me72002_crc32"}
};

unsigned char ts_Tablecomments[NUM_DATA_SIGS][255] = 
		{
			{"Hash Table for CRC32 Checksum/n256 words long"},
			{"Hash Table for OBD-II Programming"},
			{"This is the 0x803c checksum code that cycles through ROM"},
			{"This is the 0x803c checksum code that cycles through ROM"},
			{"This is the 0x803c checksum code that cycles through ROM (ME7.6.1)"},
			{"DTC Lookup Table"},
			{"DTC Lookup Table"},
			{"DTC Lookup Table"},
			{"DTC Forming Table"},
			{"Table to linearise the Oil Temp output"},
			{"Table to linearise the IAT output"},
			{"Table to linearise the Hot Wire MAF output"},
			{"Table to linearise the EGT output"},
			{"Table to linearise the CTS output"},
			{"Multipoint chksum block"},
			{"Multipoint chksum block"},
			{"CRC8 done here"},
			{"CRC8 done here"},
			{"Sets range of Main ROM CRC8 Chksum"},
			{ "ME72002 crc32 checksum code" }
		};
unsigned char ts_Tablesigs[NUM_DATA_SIGS][310] = 
		{
			//CRC32 Hash Table (len 128)
			{0x00, 0x00, 0x00, 0x00, 0x96, 0x30, 0x07, 0x77, 0x2c, 0x61, 0x0e, 0xee, 0xba, 0x51, 0x09, 0x99},
			//0x19, 0xc4, 0x6d, 0x07, 0x8f, 0xf4, 0x6a, 0x70, 0x35, 0xa5, 0x63, 0xe9, 0xa3, 0x95, 0x64, 0x9e, 
			//0x32, 0x88, 0xdb, 0x0e, 0xa4, 0xb8, 0xdc, 0x79, 0x1e, 0xe9, 0xd5, 0xe0, 0x88, 0xd9, 0xd2, 0x97, 
			//0x2b, 0x4c, 0xb6, 0x09, 0xbd, 0x7c, 0xb1, 0x7e, 0x07, 0x2d, 0xb8, 0xe7, 0x91, 0x1d, 0xbf, 0x90, 
			//0x64, 0x10, 0xb7, 0x1d, 0xf2, 0x20, 0xb0, 0x6a, 0x48, 0x71, 0xb9, 0xf3, 0xde, 0x41, 0xbe, 0x84, 
			//0x7d, 0xd4, 0xda, 0x1a, 0xeb, 0xe4, 0xdd, 0x6d, 0x51, 0xb5, 0xd4, 0xf4, 0xc7, 0x85, 0xd3, 0x83, 
			//0x56, 0x98, 0x6c, 0x13, 0xc0, 0xa8, 0x6b, 0x64, 0x7a, 0xf9, 0x62, 0xfd, 0xec, 0xc9, 0x65, 0x8a, 
			//0x4f, 0x5c, 0x01, 0x14, 0xd9, 0x6c, 0x06, 0x63, 0x63, 0x3d, 0x0f, 0xfa, 0xf5, 0x0d, 0x08, 0x8d},
			//ME7.1 OBD-II Programming Hash (len 256)
			{0x89, 0x12, 0x22, 0x0a, 0xa1, 0x90, 0x48, 0x14, 0x91, 0x24, 0x21, 0x24, 0x85, 0x02, 0x0a, 0x29, 
			0x91, 0x50, 0x14, 0x42, 0xc1, 0x22, 0x48, 0x50, 0xc1, 0xc4, 0x24, 0x0a, 0x29, 0x22, 0x25, 0x14, 
			0x25, 0x05, 0x25, 0x24, 0x91, 0xa4, 0x10, 0x25, 0x63, 0x88, 0x48, 0x28, 0x85, 0x88, 0x14, 0x29, 
			0xa5, 0x84, 0x21, 0x42, 0x21, 0x85, 0x12, 0x49, 0x85, 0x4a, 0x84, 0x50, 0x11, 0xc2, 0x0c, 0x62, 
			0xa9, 0x52, 0x44, 0x12, 0x51, 0x22, 0x93, 0x18, 0x59, 0xa4, 0x24, 0x24, 0x21, 0x95, 0x14, 0x29, 
			0x21, 0x26, 0x35, 0x42, 0x89, 0x22, 0x51, 0x4a, 0x11, 0x89, 0xa4, 0x52, 0x75, 0x14, 0x89, 0x11, 
			0x23, 0x65, 0x34, 0x22, 0xd1, 0x18, 0x31, 0x4a, 0x11, 0x71, 0x49, 0x64, 0x29, 0x45, 0xe3, 0x0a, 
			0x89, 0x89, 0x39, 0x15, 0x67, 0x4a, 0x32, 0x22, 0x89, 0xb4, 0x12, 0x2d, 0x75, 0x4a, 0x2a, 0x13, 
			0x69, 0x34, 0xb1, 0x19, 0x53, 0xc4, 0xd2, 0x25, 0x9b, 0x34, 0x49, 0x49, 0x59, 0x92, 0x4e, 0x52, 
			0x6b, 0xca, 0x64, 0x19, 0x9b, 0x24, 0xf5, 0x24, 0x75, 0x91, 0x97, 0x28, 0x59, 0x59, 0x2a, 0x35, 
			0x49, 0x17, 0x39, 0x3a, 0xa9, 0x4e, 0xd4, 0x51, 0x25, 0x4f, 0x4a, 0x56, 0x49, 0x26, 0xd5, 0x6a, 
			0x25, 0x39, 0x49, 0x76, 0xc9, 0x52, 0xde, 0x25, 0x33, 0x93, 0x2e, 0x33, 0x97, 0x49, 0xd6, 0x68, 
			0xfb, 0x47, 0x49, 0x49, 0xcf, 0x9a, 0x74, 0x33, 0x5d, 0x5b, 0xd5, 0x5a, 0x4f, 0x2a, 0x27, 0x7f, 
			0x75, 0x5b, 0xbd, 0x35, 0x5d, 0xd5, 0x5a, 0x3f, 0xad, 0x6d, 0x5b, 0x5b, 0x6b, 0xad, 0x5d, 0x6b, 
			0xd5, 0x7a, 0xb5, 0x75, 0x6f, 0xd5, 0xba, 0x5d, 0xad, 0x6a, 0xbf, 0x6d, 0xb5, 0x5e, 0x77, 0x75, 
			0xd5, 0xfe, 0xed, 0x5a, 0xd5, 0x7d, 0x5f, 0x6b, 0x6b, 0x7b, 0x75, 0x6f, 0xbd, 0x5d, 0xbd, 0x5f},
			//803c chksum code seq (len 36)
			{0xdc, 0x09, 0xa8, 0x48, 0xe0, 0x05, 0x00, 0x64, 0x10, 0x75, 0xf0, 0x48, 0xf0, 0x59, 0x06, 0xf4, 
			0xfe, 0x1f, 0x18, 0x50, 0xdc, 0x05, 0xa8, 0x24, 0xe0, 0x03, 0x00, 0x62, 0x10, 0x73, 0x06, 0xf8, 
			0x00, 0x20, 0x18, 0x90},
			//803c chksum code seq (len 88)
			{0x9f, 0x89, 0xc2, 0xf4, 0x4f, 0xb2, 0x5c, 0x84, 0xf6, 0xf4, 0x5e, 0x8f, 0xc2, 0xfc, 0x4f, 0xb2, 
			0xc2, 0xf5, 0x9b, 0x89, 0x1b, 0xc5, 0xf2, 0xfc, 0x0e, 0xfe, 0x7c, 0x7c, 0x46, 0xfc, 0xff, 0x00, 
			0x8d, 0x03, 0xf7, 0x8f, 0x9d, 0x89, 0x0d, 0x03, 0xf0, 0x4c, 0xf7, 0xf8, 0x9d, 0x89, 0xc2, 0xf4, 
			0x9d, 0x89, 0x5c, 0x24, 0xf6, 0xf4, 0x62, 0x8f, 0xf2, 0xf4, 0x16, 0xbc, 0x9a, 0xf4, 0x08, 0x70, 
			0xf7, 0x8e, 0xa3, 0x89, 0xf7, 0x8e, 0xa5, 0x89, 0xf6, 0x8e, 0x64, 0x8f, 0xf6, 0x8e, 0x66, 0x8f, 
			0xf2, 0xf4, 0x14, 0xbc, 0x8a, 0xf4, 0x04, 0x70},
			//803c chksum code seq (len 36) (ME7.6.1)
			{0xdc, 0x0d, 0xa8, 0x8c, 0xe0, 0x09, 0x00, 0xe8, 0x10, 0xf9, 0xf0, 0x8c, 0xf0, 0x1d, 0x06, 0xf8,
			0xfe, 0x1f, 0x18, 0x10, 0xdc, 0x01, 0xa8, 0x88, 0xe0, 0x01, 0x00, 0xe8, 0x10, 0xf1, 0x06, 0xfc,
			0x00, 0x20, 0x18, 0xd0},
			//DTC Table (len 64)
			{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x14, 0x01, 0x14, 0x40, 0x14, 0x00, 0x14,
			0x02, 0x04, 0x01, 0x04, 0x01, 0x04, 0x01, 0x04, 0x56, 0x14, 0x56, 0x14, 0x56, 0x14, 0x56, 0x14, 
			0x60, 0x14, 0x60, 0x14, 0x60, 0x14, 0x60, 0x14, 0x61, 0x14, 0x61, 0x14, 0x61, 0x14, 0x61, 0x14, 
			0x62, 0x14, 0x62, 0x14, 0x62, 0x14, 0x62, 0x14, 0x53, 0x14, 0x54, 0x14, 0x55, 0x14, 0x55, 0x14},
			//DTC Table(len 60)
			{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x06, 0x01, 0x06, 0x01, 0x06, 0x01, 0x06,
			0x02, 0x14, 0x01, 0x14, 0x40, 0x14, 0x00, 0x14, 0x02, 0x04, 0x01, 0x04, 0x01, 0x04, 0x01, 0x04, 
			0x56, 0x14, 0x56, 0x14, 0x56, 0x14, 0x56, 0x14, 0x60, 0x14, 0x60, 0x14, 0x60, 0x14, 0x60, 0x14, 
			0x61, 0x14, 0x61, 0x14, 0x61, 0x14, 0x61, 0x14, 0x62, 0x14, 0x62, 0x14},
			//DTC Table (len 60)
			{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x06, 0x01, 0x06, 0x01, 0x06, 0x01, 0x06, 
			0x03, 0x04, 0x03, 0x04, 0x03, 0x04, 0x03, 0x04, 0x02, 0x04, 0x01, 0x04, 0x01, 0x04, 0x01, 0x04, 
			0x56, 0x14, 0x56, 0x14, 0x56, 0x14, 0x56, 0x14, 0x60, 0x14, 0x60, 0x14, 0x60, 0x14, 0x60, 0x14, 
			0x61, 0x14, 0x61, 0x14, 0x61, 0x14, 0x61, 0x14, 0x62, 0x14, 0x62, 0x14},
			//DTC Related Lookup (len 64)
			{0x00, 0x00, 0x57, 0x00, 0x56, 0x00, 0x5f, 0x01, 0x60, 0x01, 0xbc, 0x02, 0xbd, 0x02, 0x62, 0x01,
			0x63, 0x01, 0x6f, 0x00, 0x6c, 0x01, 0xa4, 0x01, 0xa5, 0x01, 0xbe, 0x02, 0xd8, 0x00, 0x40, 0x02, 
			0xec, 0x00, 0x29, 0x01, 0x32, 0x01, 0x0a, 0x02, 0x75, 0x00, 0xae, 0x01, 0xaf, 0x01, 0x6c, 0x00, 
			0x61, 0x01, 0x49, 0x01, 0x2b, 0x01, 0xb8, 0x01, 0x93, 0x01, 0x9c, 0x01, 0x1d, 0x02, 0x92, 0x01},
			// Oil Temp Linearise (Len 38)
			{0x14, 0x09, 0x0b, 0x0d, 0x11, 0x16, 0x1c, 0x25, 0x2f, 0x3d, 0x4d, 0x62, 0x79, 0x91, 0xa9, 0xc0,
			0xce, 0xda, 0xe2, 0xeb, 0xfd, 0xed, 0xe0, 0xd3, 0xc5, 0xb8, 0xab, 0x9d, 0x90, 0x83, 0x75, 0x68,
			0x5b, 0x4d, 0x40, 0x33, 0x25, 0x18},
			// IAT Linearise (Len 38)
			{0x14, 0x00, 0x08, 0x09, 0x0c, 0x0e, 0x12, 0x17, 0x1d, 0x25, 0x30, 0x3d, 0x4d, 0x6c, 0x8f, 0xa6,
			0xba, 0xcc, 0xd8, 0xe1, 0xff, 0xff, 0xfb, 0xed, 0xe0, 0xd3, 0xc5, 0xb8, 0xab, 0x9d, 0x90, 0x83, 
			0x75, 0x61, 0x4d, 0x40, 0x33, 0x25},
			//Linearise MAF (len 16)
			{0x93,0x05,0x9B,0x05,0xA2,0x05,0xAA,0x05,0xB2,0x05,0xB9,0x05,0xC1,0x05,0xC8,0x05},
			//Linearise EGT (len 16)
			{0x12,0x00,0x00,0x00,0x9A,0x19,0x17,0x28,0x39,0x36,0x0B,0x44,0x9D,0x51,0xFA,0x5E},
			//Linearise CTS (len 16)
			{0x14,0x00,0x00,0x00,0x24,0x00,0x2C,0x00,0x38,0x00,0x44,0x00,0x58,0x00,0x70,0x00},
			//Multipoint chksum (len 40)
			{0x00, 0x00, 0x00, 0x00, 0xff, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0x00, 0x40, 0x00, 0x00, 0xff, 0x7f, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0x00, 0x80, 0x01, 0x00, 0xff, 0xbf, 0x01, 0x00},
			//Multipoint chksum (len 40)
			{0x00, 0x00, 0x00, 0x00, 0xff, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
			0x00, 0x40, 0x00, 0x00, 0xff, 0x7f, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
			0x00, 0x00, 0x80, 0x00, 0xff, 0x3f, 0x80, 0x00},
			//CRC8 Code (len 20)
			{0xdc, 0x09, 0xa8, 0x48, 0xe0, 0x05, 0x04, 0xff, 0xff, 0xff, 0x14, 0xff, 0xff, 0xff, 0x08, 0x82, 
			0x18, 0x90, 0x08, 0x71},
			//CRC8 Code (len 20)
			{0xdc, 0x0e, 0xa8, 0xfd, 0xe0, 0x01, 0x04, 0xff, 0xff, 0xff, 0x14, 0xff, 0xff, 0xff, 0x08, 0xd2, 
			0x18, 0xe0, 0x08, 0xc1},
			//Main ROM Chksum Range (len 16)
			{0x00, 0x00, 0x00, 0x00, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0xff, 0xff, 0x08, 0x00},
			//me72002_crc32 (len 48)
			{ 0x88, 0x60, 0x28, 0x04, 0xc2, 0xf4, 0x69, 0x85, 0x68, 0x41, 0xea, 0x20, 0xda, 0x2a, 0xd7, 0x40, 
			0xe1, 0x00, 0xc2, 0xf4, 0x51, 0x08, 0x68, 0x41, 0xea, 0x30, 0xda, 0x2a, 0xc2, 0xf4, 0x68, 0x85, 0x68,
			0x42, 0xea, 0x30, 0xda, 0x2a, 0xf3, 0xf8, 0x0c, 0xc7, 0x49, 0x81, 0xea, 0x30, 0x20, 0x2a },
		};

unsigned int ts_siglen[NUM_DATA_SIGS] = {16, 256, 36, 88, 36, 64, 60, 60, 64, 38, 38, 16, 16, 16, 40, 40, 20, 20, 16, 48};

//////////////////////////////////////////////////////////////////////
//,Construction/Destruction
//////////////////////////////////////////////////////////////////////

FunctionSigs::FunctionSigs()
{
}

FunctionSigs::~FunctionSigs()
{

}
//////////////////////////////////////////////////////////////////////
// Helpers
//////////////////////////////////////////////////////////////////////

//Finds a given binary sequence in the given binary. If 0xff then this is don't care
ea_t FunctionSigs::FindBinaryWithDontCare(uchar* ubinstr,unsigned __int32 nSLength, ea_t eaStartAddress, ea_t eaEndAddr) 
{
	ea_t		eaAddr = BADADDR,eaSearchAddr=0,nIndexA=0,nIndexB=0;
	uchar		nRead=0;
	int			iBit = 0;
	uint32		v=0;

//	ea1stAddr = find_binary(ea_t startea,ea_t endea,ubinstr,16,sflag);
	if(nSLength == 0)
	{
		msg("WARNING, Length = 0 - nothing to do!\n");
		return BADADDR;
	}

	show_wait_box("Searching for binary pattern");

	//for loop. nIndexA is automatically incremented.
	for (nIndexA = eaStartAddress; nIndexA < eaEndAddr;)
	{
		//replace_wait_box("Searching for binary pattern at address 0x%02X", nIndexA);
		eaAddr = nIndexA;//Store where we are.
		nRead = get_8bit(&nIndexA, &v, &iBit);//Read 8bits but remember that nIndexA is automatically incremented
		if (nIndexA==BADADDR)//Have we ran out of bytes?
		{
			eaAddr = BADADDR;
			msg(" not found, ran beyond binary address space\n");
			goto exit;
		}
		if (nIndexA >= (eaEndAddr - 1))
		{
			eaAddr = BADADDR;
			msg(" not found, ran beyond binary address space\n");
			goto exit;
		}

		//Check if user wants to exit,
		if ((eaAddr % 0x100) == 0)
		{
			show_addr(eaAddr);// Show an address on the autoanalysis indicator.
			if (user_cancelled())
				goto exit;
				//break;
		}

		if (nRead == *ubinstr)
		{// We're matched for the 1st byte, now check the rest
			//msg("FindBinaryWithDontCare() matched 1st byte '0x%0x' at 0x%0x with length %lu\n", nRead, nIndexA, nSLength);
			//eaSearchAddr = eaAddr;
			for (nIndexB = 1; nIndexB < nSLength; nIndexB++)
			{
				eaSearchAddr = eaAddr + nIndexB;
				if (*(ubinstr + nIndexB) != 0xff) //check for don't care flag
				{
					//Read an 8 bit value from the database. This increments eaSearchAddr automatically.
					nRead = get_8bit(&eaSearchAddr, &v, &iBit);
					//msg(":    found '0x%0x' at 0x%0x\n", nRead, eaSearchAddr);
					if (eaSearchAddr==BADADDR)//Have we ran out of bytes?
					{
						eaAddr=BADADDR;
						msg(" not found, ran beyond binary address space\n");
						goto exit;
					}
					if(nRead != *(ubinstr+nIndexB))
					{
						//msg(" no longer matched.\n");
						eaAddr=BADADDR;
						break;// No longer matched,exit this for(..) loop
					}
					else if(nIndexB==(nSLength-1))
					{
						msg(" binary string matched at 0x%x.\n", eaAddr);
						goto exit;
					}
					else if (user_cancelled())
						goto exit;
				}
//				else
//					msg(": ignoring 0xff\n");
			}
		}
	}//for

	exit:
	hide_wait_box();
	//	msg("\n");
	return eaAddr;
}

// Creates a function at the address and auto comments it
ea_t FunctionSigs::CreateFunctionAndComment(ea_t eaAddr, unsigned char* pFuncName, unsigned char* pComment, unsigned int iTries)
{
	if(del_func(eaAddr))//delete any function that already exists because the rest of the code may fail.
	{
		msg("    Try %d, function %s deleted at 0x%x -",iTries, pFuncName, eaAddr);
	}
	else
	{
		msg("    Try %d, del_func failed at 0x%x for some reason -", iTries, eaAddr);
	}

	if(add_func(eaAddr,BADADDR))
	{
		char ucBuf[512];
		msg(" function %s created at 0x%x\n", pFuncName, eaAddr);
		qsnprintf(ucBuf, 40, "%s_%x", pFuncName, eaAddr);//Create a unique name
		set_name(eaAddr, ucBuf, SN_PUBLIC);//set the name of the function
	}
	else
	{
		msg(" found %s at 0x%x but add_func failed for some reason\n", pFuncName, eaAddr);
	}
	
	//Comment the new function
	func_t* functFunction = get_func(eaAddr); // get a pointer to the function chunk
	if (functFunction!=NULL)
	{
		set_func_cmt(functFunction,"", TRUE);//delete the existing comment
		//update_func(functFunction);
		set_func_cmt(functFunction, reinterpret_cast<const char*>(pComment), TRUE);//Make a repeatable comment
		update_func(functFunction);//Crashes plugin if NULL
		//Try the next set of addresses
		eaAddr=functFunction->end_ea;// the end of the function just created.
	}
	else
	{
		eaAddr+=0x2;// No success but index on 16 bits to try again
	}
	return eaAddr;
}

//Comments the address given
void FunctionSigs::Comment(ea_t eaAddr, unsigned char* pDataName, unsigned char* pComment, unsigned int iTries)
{
	if (eaAddr != BADADDR)
	{
		char ucBuf[512];
		qsnprintf(ucBuf, 40, "%s_%x", reinterpret_cast<char*>(pDataName), eaAddr);//Create a unique name
		if(	set_name(eaAddr, ucBuf, SN_NOCHECK | SN_PUBLIC) != 0)
		{	//set the name of the Table
			msg("    data table %s commented at 0x%x\n", pDataName, eaAddr);
		}
		else
		{
			msg("    data table %s failed to be commented at 0x%x\n", pDataName, eaAddr);
		}
//		if( generate_big_comment((const char *)pComment, COLOR_AUTOCMT) == 0)
		if(	set_cmt(eaAddr, reinterpret_cast<const char *>(pComment), TRUE) == 1 )// comment the label and make repeatable
		{
			msg("    set_cmt() suceeded\n");
		}
		else
		{
			msg("    set_cmt() failed\n");
		}
	}
}

//////////////////////////////////////////////////////////////////////
// Implementation
//////////////////////////////////////////////////////////////////////

//Looks for specific binary patterns and then makes a subroutine and comments it
void FunctionSigs::FindFuncSigsAndComment(ea_t eaStartAddr, ea_t eaEndAddr)
{
	msg("Finding function and data signatures....\n");

	unsigned int	uIndex=0;
	ea_t			eaAddr = 0, eaTryAddr = 0, iTries = 0;

	show_wait_box("Finding function signatures....");

	//1st we search for function signatures
	for(uIndex=0; uIndex < NUM_FUNC_SIGS; uIndex++)
		//for(uIndex=0; uIndex < 0; uIndex++) // For testing
	{
		msg("\nSearching for function %s, len = %lu\n", fs_functionnames[uIndex], fs_siglen[uIndex]);
		for (eaTryAddr = eaStartAddr, iTries = 0; eaTryAddr<eaEndAddr; eaTryAddr = eaAddr, iTries++)//We may have duplicates
		{
			//replace_wait_box("Finding function signatures at address: 0x%0X", eaTryAddr);
			if ((eaAddr % 0x100) == 0)
			{
				show_addr(eaAddr);
				if (user_cancelled())
					break;
			}

			//Search from the last place searched until the end of the database
			eaAddr = FindBinaryWithDontCare(fs_sigs[uIndex], fs_siglen[uIndex], eaTryAddr, eaEndAddr);
			if (eaAddr != BADADDR)
			{
				eaAddr = CreateFunctionAndComment(eaAddr, fs_functionnames[uIndex], fs_functioncomments[uIndex], iTries);
			}
			else if(iTries==0)
			{
				msg("    Nothing found\n");
				eaAddr+=0x2;//TO DO: Find the length of the function just created.
				break;
			}
			else
			{
				msg("    No further functions found after %d tries\n", iTries);
				eaAddr+=0x2;//TO DO: Find the length of the function just created.
				break;
			}
		}
	}
	hide_wait_box();

	//2nd we search for function signatures
//	eaStartAddr=0xbfb80;
//	eaEndAddr=0xbfb90;
	show_wait_box("Finding function data signatures....");
	for (uIndex = 0; uIndex < NUM_DATA_SIGS; uIndex++)
	{
		msg("\nSearching for data %s, len = %lu\n",ts_Tablenames[uIndex], ts_siglen[uIndex]);
		for (eaTryAddr = eaStartAddr, iTries = 0; eaTryAddr<eaEndAddr; eaTryAddr = eaAddr, iTries++)//We may have duplicates
		{
			if ((eaAddr % 0x1000) == 0)
			{
				show_addr(eaAddr);
				if (user_cancelled())
					break;
			}

			//Search from the last place searched until the end of the database
			eaAddr = FindBinaryWithDontCare(ts_Tablesigs[uIndex], ts_siglen[uIndex], eaTryAddr, eaEndAddr);
			if (eaAddr != BADADDR)
			{
				Comment(eaAddr, ts_Tablenames[uIndex], ts_Tablecomments[uIndex], iTries);
			}
			else if(iTries==0)
			{
				msg("    Nothing found\n");
				eaAddr+=0x2;//TO DO: Find the length of the function just created.
				break;
			}
			else
			{
				msg("    No further functions found after %d tries\n", iTries);
				eaAddr+=0x2;//TO DO: Find the length of the function just created.
				break;
			}
			eaAddr+=ts_siglen[uIndex];
		}
	}
	hide_wait_box();
}